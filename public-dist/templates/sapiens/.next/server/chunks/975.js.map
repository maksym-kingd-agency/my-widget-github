{"version":3,"file":"975.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAkF;AAQ3D;AACuB;AAoBvC,MAAMI,2BAAaJ,8BAAUA,CAA+B,CAACU,OAAOC,MAAQ;IACjF,MAAM,EACJC,SAAQ,EACRC,iBAAgB,EAChBC,GAAE,EACFC,UAAS,EACTC,UAAS,EACTC,UAAS,EACTC,WAAU,EACVC,QAAO,EACPC,YAAW,EACXC,UAAS,EACT,GAAGC,MACJ,GAAGZ;IACJ,MAAM,EAAEa,GAAGC,UAAS,EAAE,GAAGf,yCAAcA;IAEvC,MAAM,CAACgB,cAAcC,gBAAgB,GAAGvB,4BAAQA,CAAqB,IAAI;IACzE,MAAM,CAACwB,iBAAiBC,mBAAmB,GAAGzB,4BAAQA,CAAC,KAAK;IAE5D,yCAAyC;IACzCD,6BAASA,CAAC,IAAM;QACd;wCACoC,GACpC2B,WAAW,IAAM;YACf,IAAIJ,gBAAgBA,cAAcK,eAAeL,cAAcM,aAAa;gBAC1EH,mBAAmB,IAAI;YACzB,CAAC;QACH,GAAG;IACL,GAAG;QAACH;KAAa;IAEjB,MAAMO,QAAQxB,sBAAQA;IACtB,MAAMyB,SAAS1B,2BAAaA,CAACyB,MAAME,WAAW,CAACC,EAAE,CAAC;IAClD,MAAMC,SAAS7B,2BAAaA,CAACyB,MAAME,WAAW,CAACC,EAAE,CAAC;IAClD,MAAME,SAAS9B,2BAAaA,CAACyB,MAAME,WAAW,CAACC,EAAE,CAAC;IAClD,MAAMG,QAAQF;IAEd,MAAMG,YAAY,OAAO3B,aAAa,WAAWY,UAAUZ,UAAUC,oBAAoB,EAAE;IAE3F,MAAM2B,YAAYvC,+BAAWA,CAC3B,CAACwC,OAAsB;QACrBf,gBAAgBe;QAEhB,IAAI,CAAC9B,KAAK;QAEV,IAAI,OAAOA,QAAQ,YAAY;YAC7BA,IAAI8B;YACJ;QACF,CAAC;QAED9B,IAAI+B,OAAO,GAAGD;IAChB,GACA;QAAC9B;KAAI;IAGP,qBACE,iBAACL,iBAAOA;QAACqC,OAAOhB,mBAAmB,CAACP,cAAc,KAAKmB,SAAS;kBAC9D,+BAAClC,oBAAaA;YACZM,KAAK6B;YACL1B,IAAI;gBACF8B,cAAc;gBACdC,UAAU;gBACV,GAAG/B,EAAE;YACP;YACC,GAAGQ,IAAI;YACRH,SAAS,CAAC,IAAM;gBACd,IAAImB,SAASpB,YAAY,OAAOA;gBAChC,IAAImB,UAAUpB,WAAW,OAAOA;gBAChC,IAAImB,UAAUpB,WAAW,OAAOA;gBAChC,IAAIiB,UAAUlB,WAAW,OAAOA;gBAEhC,OAAOI;YACT;sBAEC,OAAOP,aAAa,WAAW2B,YAAY3B,QAAQ;;;AAI5D,GAAG;AAEHR,WAAW0C,WAAW,GAAG;AAEzB,4DAAe1C,gDAAAA,UAAUA,EAAAA,EAAC;;;AC9GG;;;;;;;;;;;;;;;;;;;;;;;;;ACAM;AAEsB;AAC5B;AAItB,MAAM6C,yBAAWjD,8BAAUA,CAChC,CAAC,EAAEkD,KAAI,EAAEtC,SAAQ,EAAEuC,OAAM,EAAEC,UAAS,EAAE,GAAG9B,MAAM,EAAEX,MAAQ;IACvD,MAAM,EAAE0C,UAAS,EAAE,GAAGN,4BAAeA;IAErC,qBACE,iBAACC,gBAAIA;QACHrC,KAAKA;QACLuC,MAAMG,aAAaF,WAAW,WAAW,MAAMD,IAAI;QACnDC,QAAQA;QACRC,WAAWA;QACV,GAAG9B,IAAI;kBAEPV;;AAGP,GACA;AACFqC,SAASH,WAAW,GAAG;AAEvB,wDAAeG,QAAQA,EAAC;;;AC1Ba;AACb","sources":["webpack:///./src/components/Typography/Typography.tsx","webpack:///./src/components/Typography/index.ts","webpack:///./src/components/links/NextLink/NextLink.tsx","webpack:///./src/components/links/NextLink/index.ts"],"sourcesContent":["import { ElementType, forwardRef, useCallback, useEffect, useState } from 'react';\n\nimport {\n  Typography as MuiTypography,\n  TypographyProps as MuiTypographyProps,\n  Tooltip,\n  useMediaQuery,\n  useTheme,\n} from '@mui/material';\nimport { useTranslation } from 'next-i18next';\n\ntype Variants<T extends string> = { [key in `${T}Variant`]?: MuiTypographyProps['variant'] };\n\nexport interface TypographyProps\n  extends MuiTypographyProps,\n    /**\n     * smVariant, mdVariant, lgVariant, bigVariant - use it to change variant for different media queries.\n     * So `variant` is default and other variants will override it (\"mobile first\").\n     * MUI includes things like \"reponsive\" font sizes (https://mui.com/material-ui/customization/typography/#responsive-font-sizes),\n     *  but for now resign uses some custom font for each adaptive place.\n     * It is preferable to use 'bigVariant' for big screens.\n     * @example bigVariant=\"h1\" with variant=\"h3\" -> \"h1\" will work on laptop and desktop screens otherwise \"h3\".\n     */\n    Variants<'sm' | 'md' | 'lg' | 'big' /* for some default adaptive value (laptop + desktop) */> {\n  component?: ElementType;\n  translateOptions?: Record<string, unknown>;\n  withTooltip?: boolean;\n}\n\nexport const Typography = forwardRef<HTMLElement, TypographyProps>((props, ref) => {\n  const {\n    children,\n    translateOptions,\n    sx,\n    smVariant,\n    mdVariant,\n    lgVariant,\n    bigVariant,\n    variant,\n    withTooltip,\n    component,\n    ...rest\n  } = props;\n  const { t: translate } = useTranslation();\n\n  const [containerRef, setContainerRef] = useState<HTMLElement | null>(null);\n  const [isTooltipHidden, setIsTooltipHidden] = useState(false);\n\n  // hide tooltip if we don't have overflow\n  useEffect(() => {\n    /* We use setTimeout to skip one additional tick.\n    E.g., it is needed on poi map card. */\n    setTimeout(() => {\n      if (containerRef && containerRef?.scrollWidth <= containerRef?.clientWidth) {\n        setIsTooltipHidden(true);\n      }\n    }, 0);\n  }, [containerRef]);\n\n  const theme = useTheme();\n  const isSmUp = useMediaQuery(theme.breakpoints.up('sm'));\n  const isMdUp = useMediaQuery(theme.breakpoints.up('md'));\n  const isLgUp = useMediaQuery(theme.breakpoints.up('lg'));\n  const isBig = isMdUp;\n\n  const textValue = typeof children === 'string' ? translate(children, translateOptions) : '';\n\n  const handleRef = useCallback(\n    (node: HTMLElement) => {\n      setContainerRef(node);\n\n      if (!ref) return;\n\n      if (typeof ref === 'function') {\n        ref(node);\n        return;\n      }\n\n      ref.current = node;\n    },\n    [ref],\n  );\n\n  return (\n    <Tooltip title={isTooltipHidden || !withTooltip ? '' : textValue}>\n      <MuiTypography\n        ref={handleRef}\n        sx={{\n          textOverflow: 'ellipsis',\n          overflow: 'hidden',\n          ...sx,\n        }}\n        {...rest}\n        variant={(() => {\n          if (isBig && bigVariant) return bigVariant;\n          if (isLgUp && lgVariant) return lgVariant;\n          if (isMdUp && mdVariant) return mdVariant;\n          if (isSmUp && smVariant) return smVariant;\n\n          return variant;\n        })()}\n      >\n        {typeof children === 'string' ? textValue : children}\n      </MuiTypography>\n    </Tooltip>\n  );\n});\n\nTypography.displayName = 'Typography';\n\nexport default Typography;\n","export * from './Typography';\n","import { forwardRef } from 'react';\n\nimport { useBuilderState } from '@king-david-it/builder';\nimport Link from 'next/link';\n\nimport { NextLinkProps } from './types';\n\nexport const NextLink = forwardRef<HTMLAnchorElement, NextLinkProps>(\n  ({ href, children, target, className, ...rest }, ref) => {\n    const { isEditing } = useBuilderState();\n\n    return (\n      <Link\n        ref={ref}\n        href={isEditing && target !== '_blank' ? '#' : href}\n        target={target}\n        className={className}\n        {...rest}\n      >\n        {children}\n      </Link>\n    );\n  },\n);\nNextLink.displayName = 'NextLink';\n\nexport default NextLink;\n","export { default } from './NextLink';\nexport * from './types';\n"],"names":["forwardRef","useCallback","useEffect","useState","Typography","MuiTypography","Tooltip","useMediaQuery","useTheme","useTranslation","props","ref","children","translateOptions","sx","smVariant","mdVariant","lgVariant","bigVariant","variant","withTooltip","component","rest","t","translate","containerRef","setContainerRef","isTooltipHidden","setIsTooltipHidden","setTimeout","scrollWidth","clientWidth","theme","isSmUp","breakpoints","up","isMdUp","isLgUp","isBig","textValue","handleRef","node","current","title","textOverflow","overflow","displayName","useBuilderState","Link","NextLink","href","target","className","isEditing","default"],"sourceRoot":""}