{"version":3,"file":"367.js","mappings":"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","sources":["webpack:///./src/helpers/withServerSideProps/helpers/checkIsCurrencySupported/checkIsCurrencySupported.ts","webpack:///./src/helpers/withServerSideProps/helpers/checkIsCurrencySupported/index.ts","webpack:///./src/helpers/withServerSideProps/helpers/checkIsLocaleSupported/checkIsLocaleSupported.ts","webpack:///./src/helpers/withServerSideProps/helpers/checkIsLocaleSupported/index.ts","webpack:///./src/helpers/withServerSideProps/helpers/getCompanyDefaultCurrencyCode/getCompanyDefaultCurrencyCode.ts","webpack:///./src/helpers/withServerSideProps/helpers/getCompanyDefaultCurrencyCode/index.ts","webpack:///./src/helpers/withServerSideProps/helpers/getCompanyDefaultLocale/getCompanyDefaultLocale.ts","webpack:///./src/helpers/withServerSideProps/helpers/getCompanyDefaultLocale/index.ts","webpack:///./src/helpers/withServerSideProps/helpers/getCurrencyRedirect/getCurrencyRedirect.ts","webpack:///./src/helpers/withServerSideProps/helpers/getCurrencyRedirect/index.ts","webpack:///./src/helpers/withServerSideProps/helpers/getLocaleRedirect/getLocaleRedirect.ts","webpack:///./src/helpers/withServerSideProps/helpers/getLocaleRedirect/index.ts","webpack:///./src/helpers/withServerSideProps/helpers/index.ts","webpack:///./src/helpers/withServerSideProps/index.ts","webpack:///./src/helpers/withServerSideProps/withServerSideProps.ts","webpack:///./src/hooks/queries/useGetLocales/index.ts","webpack:///./src/hooks/queries/useGetLocales/useGetLocales.ts"],"sourcesContent":["import { QueryClient } from '@tanstack/react-query';\nimport { fetchCurrencies } from 'hooks/queries';\nimport { GetServerSidePropsContext } from 'next';\n\ninterface CheckIsCurrencySupportedParams {\n  queryClient: QueryClient;\n  context: GetServerSidePropsContext;\n  currencyCode: string | undefined;\n}\n\nexport const checkIsCurrencySupported = async (\n  params: CheckIsCurrencySupportedParams,\n): Promise<boolean> => {\n  const { context, currencyCode, queryClient } = params;\n\n  const currenciesData = await fetchCurrencies(queryClient, context);\n\n  return currenciesData.some((currency) => {\n    return currency.code === currencyCode;\n  });\n};\n","export * from './checkIsCurrencySupported';\n","import { QueryClient } from '@tanstack/react-query';\nimport { fetchWebsite } from 'hooks/queries';\nimport { GetServerSidePropsContext } from 'next';\n\ninterface CheckIsLocaleSupportedParams {\n  queryClient: QueryClient;\n  context: GetServerSidePropsContext;\n  locale: string | undefined;\n}\n\nexport const checkIsLocaleSupported = async (\n  params: CheckIsLocaleSupportedParams,\n): Promise<boolean> => {\n  const { context, locale, queryClient } = params;\n\n  const websiteData = await fetchWebsite(queryClient, context);\n\n  const { locales: websiteLocales = [] } = websiteData || {};\n\n  return websiteLocales.some((record) => locale === record.locale);\n};\n","export * from './checkIsLocaleSupported';\n","import { QueryClient } from '@tanstack/react-query';\nimport { fetchCurrencies, fetchWebsite } from 'hooks/queries';\nimport { GetServerSidePropsContext } from 'next';\n\ninterface GetCompanyDefaultCurrencyCodeParams {\n  queryClient: QueryClient;\n  context: GetServerSidePropsContext;\n}\n\ntype GetCompanyDefaultCurrencyCodeReturn = Promise<string | undefined>;\n\nexport const getCompanyDefaultCurrencyCode = async (\n  params: GetCompanyDefaultCurrencyCodeParams,\n): GetCompanyDefaultCurrencyCodeReturn => {\n  const { context, queryClient } = params;\n\n  const websiteData = await fetchWebsite(queryClient, context);\n  const currenciesData = await fetchCurrencies(queryClient, context);\n\n  const companyDefaultCurrency = currenciesData.find((currency) => {\n    return currency.id === websiteData?.company?.default_currency_id;\n  });\n\n  return companyDefaultCurrency?.code;\n};\n","export * from './getCompanyDefaultCurrencyCode';\n","import { QueryClient } from '@tanstack/react-query';\nimport { fetchWebsite } from 'hooks/queries';\nimport { GetServerSidePropsContext } from 'next';\n\ninterface GetCompanyDefaultLocaleParams {\n  queryClient: QueryClient;\n  context: GetServerSidePropsContext;\n}\n\ntype GetCompanyDefaultLocaleReturn = Promise<string | undefined>;\n\nexport const getCompanyDefaultLocale = async (\n  params: GetCompanyDefaultLocaleParams,\n): GetCompanyDefaultLocaleReturn => {\n  const { context, queryClient } = params;\n  const { company, locales = [] } = await fetchWebsite(queryClient, context);\n  const defaultLocaleId = company?.default_language_id;\n\n  const defaultLocaleRecord = locales.find((locale) => locale.id === defaultLocaleId);\n\n  return defaultLocaleRecord?.locale;\n};\n","export * from './getCompanyDefaultLocale';\n","import { QueryClient } from '@tanstack/react-query';\nimport { CURRENCY_COOKIE_KEY } from 'application/cookiesKeys';\nimport { getCookies } from 'cookies-next';\nimport { CURRENCY_QUERY_PARAM_KEY } from 'hooks/index';\nimport { get } from 'lodash';\nimport { GetServerSidePropsContext, Redirect } from 'next';\n\nimport { checkIsCurrencySupported } from '../checkIsCurrencySupported';\nimport { getCompanyDefaultCurrencyCode } from '../getCompanyDefaultCurrencyCode';\n\ninterface GetCurrencyRedirectParams {\n  queryClient: QueryClient;\n  context: GetServerSidePropsContext;\n}\n\ntype GetCurrencyRedirectReturn = Promise<Redirect | undefined>;\n\nexport const getCurrencyRedirect = async (\n  params: GetCurrencyRedirectParams,\n): GetCurrencyRedirectReturn => {\n  const { context, queryClient } = params;\n\n  const queryCurrencyCode = get(context.query, CURRENCY_QUERY_PARAM_KEY);\n\n  const cookies = getCookies({ req: context.req, res: context.res });\n\n  const isQueryCurrencyCodeSupported = Array.isArray(queryCurrencyCode)\n    ? false\n    : await checkIsCurrencySupported({\n        queryClient,\n        context,\n        currencyCode: queryCurrencyCode,\n      });\n\n  if (!queryCurrencyCode || !isQueryCurrencyCodeSupported) {\n    const currencyCodeFromCookies = get(cookies, CURRENCY_COOKIE_KEY);\n\n    const isCurrencyCodeFromCookiesSupported = await checkIsCurrencySupported({\n      queryClient,\n      context,\n      currencyCode: currencyCodeFromCookies,\n    });\n\n    const companyDefaultCurrencyCode = await getCompanyDefaultCurrencyCode({\n      context,\n      queryClient,\n    });\n\n    const [urlWithoutSearch, searchString] = context.resolvedUrl.split('?');\n    const searchParams = new URLSearchParams(searchString);\n\n    const redirectCurrencyCode =\n      currencyCodeFromCookies && isCurrencyCodeFromCookiesSupported\n        ? currencyCodeFromCookies\n        : companyDefaultCurrencyCode;\n\n    if (redirectCurrencyCode) {\n      searchParams.set(CURRENCY_QUERY_PARAM_KEY, redirectCurrencyCode);\n    } else {\n      searchParams.delete(CURRENCY_QUERY_PARAM_KEY);\n    }\n\n    // We should include locale to redirect path manually\n    const localeForRedirect = context.locale === 'default' ? '' : `/${context.locale}`;\n\n    const stringifiedSearchParams = searchParams.toString();\n    const newSearch = stringifiedSearchParams ? `?${stringifiedSearchParams}` : '';\n\n    return {\n      destination: `${localeForRedirect}${urlWithoutSearch}${newSearch}`,\n      permanent: false,\n    };\n  }\n};\n","export * from './getCurrencyRedirect';\n","import { QueryClient } from '@tanstack/react-query';\nimport { DEFAULT_LOCALE } from 'application/constants';\nimport { LOCALE_COOKIE_KEY } from 'application/cookiesKeys';\nimport { getCookies } from 'cookies-next';\nimport { get } from 'lodash';\nimport { GetServerSidePropsContext, Redirect } from 'next';\n\nimport { checkIsLocaleSupported } from '../checkIsLocaleSupported';\nimport { getCompanyDefaultLocale } from '../getCompanyDefaultLocale';\n\ninterface GetLocaleRedirectParams {\n  queryClient: QueryClient;\n  context: GetServerSidePropsContext;\n}\n\ntype GetLocaleRedirectReturn = Promise<Redirect | undefined>;\n\nexport const getLocaleRedirect = async (\n  params: GetLocaleRedirectParams,\n): GetLocaleRedirectReturn => {\n  const { context, queryClient } = params;\n\n  const isDefaultLocale = context.locale === 'default';\n\n  const cookies = getCookies({ req: context.req, res: context.res });\n\n  const isContextLocaleSupported = await checkIsLocaleSupported({\n    queryClient,\n    context,\n    locale: context.locale,\n  });\n\n  if (isDefaultLocale || !isContextLocaleSupported) {\n    const localeFromCookies = get(cookies, LOCALE_COOKIE_KEY);\n\n    const isLocaleFromCookiesSupported = await checkIsLocaleSupported({\n      queryClient,\n      context,\n      locale: localeFromCookies,\n    });\n\n    const companyDefaultLocale = await getCompanyDefaultLocale({ queryClient, context });\n\n    const redirectLocale =\n      localeFromCookies && isLocaleFromCookiesSupported\n        ? localeFromCookies\n        : companyDefaultLocale ?? DEFAULT_LOCALE;\n\n    return {\n      destination: `/${redirectLocale}${context.resolvedUrl}`,\n      permanent: false,\n    };\n  }\n};\n","export * from './getLocaleRedirect';\n","export * from './getLocaleRedirect';\nexport * from './getCurrencyRedirect';\n","export * from './withServerSideProps';\n","import { Builder } from '@king-david-it/builder';\nimport { createQueryClient } from '@packages/providers';\nimport { dehydrate, DehydratedState, QueryClient } from '@tanstack/react-query';\nimport { getCookies } from 'cookies-next';\nimport { CURRENCY_QUERY_PARAM_KEY } from 'hooks';\nimport { get } from 'lodash';\nimport { GetServerSideProps, GetServerSidePropsContext, GetServerSidePropsResult } from 'next';\nimport { SSRConfig } from 'next-i18next';\nimport { serverSideTranslations } from 'next-i18next/serverSideTranslations';\n\nimport { getCurrencyRedirect, getLocaleRedirect } from './helpers';\n\nexport interface SSRPageProps extends SSRConfig {\n  dehydratedState: DehydratedState;\n  userAgent?: string;\n  cookies: ReturnType<typeof getCookies>;\n  locale: string;\n  currencyCode?: string;\n}\n\ntype Fetcher = (queryClient: QueryClient, context: GetServerSidePropsContext) => Promise<void>;\n\ninterface WithServerSidePropsParams {\n  /**\n   * Array of functions to fetch data for the page on server side\n   */\n  fetchers?: Fetcher[];\n  /**\n   * Function to handle response from server side props\n   */\n  handler?: (\n    queryClient: QueryClient,\n    context: GetServerSidePropsContext,\n    props: SSRPageProps,\n  ) => Promise<GetServerSidePropsResult<SSRPageProps>> | GetServerSidePropsResult<SSRPageProps>;\n  /**\n   * For debugging purposes allows to disable server side requests\n   */\n  disableRequests?: boolean;\n  enableRequestsOnClientSideTransition?: boolean;\n}\n\nexport const withServerSideProps = (\n  params?: WithServerSidePropsParams,\n): GetServerSideProps<SSRPageProps> => {\n  const {\n    fetchers,\n    handler,\n    disableRequests,\n    enableRequestsOnClientSideTransition = false,\n  } = params || {};\n\n  return async (context) => {\n    const queryClient = createQueryClient({ context });\n    const builderState = Builder.getStateFromURL(context.resolvedUrl);\n    const userAgent = context.req.headers['user-agent'];\n\n    // Check if user moved from one page to another in browser\n    const isClientSideTransition = context.req.url?.startsWith('/_next');\n\n    const shouldDisableFetchers =\n      disableRequests || (isClientSideTransition && !enableRequestsOnClientSideTransition);\n\n    const localeRedirect = await getLocaleRedirect({ queryClient, context });\n\n    if (localeRedirect) {\n      return { redirect: localeRedirect };\n    }\n\n    const currencyRedirect = await getCurrencyRedirect({ queryClient, context });\n\n    if (currencyRedirect) {\n      return { redirect: currencyRedirect };\n    }\n\n    try {\n      if (!shouldDisableFetchers) {\n        /**\n         * Send requests to API\n         */\n        let fetchersPromises: Promise<void>[] = [];\n\n        // when we edit page in builder, we don't need to fetch page data (except website settings to set theme colors)\n        if (fetchers && !builderState.isEditing) {\n          fetchersPromises = fetchers.map((fetcher) => fetcher(queryClient, context));\n        }\n\n        /**\n         * Wait for promises to resolve, data from requests will be available inside of queryClient\n         */\n        await Promise.all(fetchersPromises);\n      }\n    } catch (err) {\n      //\n    }\n\n    /**\n     * We should get correct values here after redirects,\n     * so we use \"as\" for types\n     */\n    const locale = context.locale as string;\n    const currencyCode = get(context.query, CURRENCY_QUERY_PARAM_KEY) as string | undefined;\n    const cookies = getCookies({ req: context.req, res: context.res });\n\n    const props: SSRPageProps = {\n      locale,\n      currencyCode,\n      userAgent,\n      cookies,\n      ...(await serverSideTranslations(locale)),\n      /**\n       * Collect all queries data and pass it to browser\n       *\n       * Workaround JSON.parse(JSON.stringify()) for infinite queries\n       * @see https://github.com/TanStack/query/issues/1458#issuecomment-747716357\n       */\n      dehydratedState: JSON.parse(JSON.stringify(dehydrate(queryClient))),\n    };\n\n    return handler ? await handler(queryClient, context, props) : { props };\n  };\n};\n","export * from './useGetLocales';\n","import { fetchClient, zodLocaleSchemas } from '@packages/providers';\nimport { QueryClient, QueryFunction, useQuery } from '@tanstack/react-query';\nimport { LOCALES_RESOURCE } from 'application/resources';\nimport { GetServerSidePropsContext } from 'next';\nimport { LocalesRecord } from 'types/index';\n\nconst queryKey = [LOCALES_RESOURCE] as const;\n\nconst queryFn: QueryFunction<LocalesRecord[]> = async (params) => {\n  const { meta } = params;\n  const context = meta?.context as GetServerSidePropsContext;\n  const endpoint = LOCALES_RESOURCE;\n\n  const {\n    data: { data },\n  } = await fetchClient.get(\n    {\n      pathname: endpoint,\n    },\n    {\n      context,\n    },\n  );\n\n  return zodLocaleSchemas.index.parse(data);\n};\n\nexport const prefetchLocales = (queryClient: QueryClient, context: GetServerSidePropsContext) => {\n  return queryClient.prefetchQuery({\n    queryKey,\n    queryFn,\n    meta: { context },\n  });\n};\n\nexport const useGetLocales = () => {\n  return useQuery({\n    queryKey,\n    queryFn,\n    refetchOnMount: false,\n  });\n};\n"],"names":["fetchCurrencies","checkIsCurrencySupported","params","context","currencyCode","queryClient","currenciesData","some","currency","code","fetchWebsite","checkIsLocaleSupported","locale","websiteData","locales","websiteLocales","record","getCompanyDefaultCurrencyCode","companyDefaultCurrency","find","id","company","default_currency_id","getCompanyDefaultLocale","defaultLocaleId","default_language_id","defaultLocaleRecord","CURRENCY_COOKIE_KEY","getCookies","CURRENCY_QUERY_PARAM_KEY","get","getCurrencyRedirect","queryCurrencyCode","query","cookies","req","res","isQueryCurrencyCodeSupported","Array","isArray","currencyCodeFromCookies","isCurrencyCodeFromCookiesSupported","companyDefaultCurrencyCode","urlWithoutSearch","searchString","resolvedUrl","split","searchParams","URLSearchParams","redirectCurrencyCode","set","delete","localeForRedirect","stringifiedSearchParams","toString","newSearch","destination","permanent","DEFAULT_LOCALE","LOCALE_COOKIE_KEY","getLocaleRedirect","isDefaultLocale","isContextLocaleSupported","localeFromCookies","isLocaleFromCookiesSupported","companyDefaultLocale","redirectLocale","Builder","createQueryClient","dehydrate","serverSideTranslations","withServerSideProps","fetchers","handler","disableRequests","enableRequestsOnClientSideTransition","builderState","getStateFromURL","userAgent","headers","isClientSideTransition","url","startsWith","shouldDisableFetchers","localeRedirect","redirect","currencyRedirect","fetchersPromises","isEditing","map","fetcher","Promise","all","err","props","dehydratedState","JSON","parse","stringify","fetchClient","zodLocaleSchemas","useQuery","LOCALES_RESOURCE","queryKey","queryFn","meta","endpoint","data","pathname","index","prefetchLocales","prefetchQuery","useGetLocales","refetchOnMount"],"sourceRoot":""}