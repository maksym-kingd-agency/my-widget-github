{"version":3,"file":"370.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAuC;AAEmB;AAEI;AAChB;AACsB;AACQ;AAYrE,MAAMM,8BAAgBN,iDAAUA,CAAC,CAACO,OAA2BC,MAAQ;IAC1E,MAAM,EACJC,GAAE,EACFC,MAAK,EACLC,GAAE,EACFC,UAAS,EACTC,WAAY,IAAI,GAChBC,MAAK,EACLC,eAAc,EACdC,WAAU,EACVC,UAAS,EACTC,KAAI,EACJC,SAAQ,EACRC,MAAK,EACLC,UAAS,EACTC,KAAI,EACJ,GAAGC,MACJ,GAAGhB;IACJ,qBACE,mDAACF,2EAAaA;QACZI,IAAIA,MAAM;QACVC,OAAOA;QACPC,IAAIA;QACJC,WAAWA;QACXC,WAAWA;QACXC,OAAO,CAAC,CAACA;QACTE,YAAYA;QACZI,OAAOA;QACPC,WAAWA;QACV,GAAGE,IAAI;kBAEP,CAAC,EAAET,MAAK,EAAEL,GAAE,EAAEe,eAAc,EAAEC,YAAW,EAAE,GAAK;YAC/C,qBACE,mDAACxB,oDAASA;gBACRyB,SAAQ;gBACRjB,IAAIA;gBACJkB,UAAUnB;gBACViB,aAAaA;gBACbX,OAAOA;gBACPG,WAAWA;gBACXK,MAAMA;gBACNJ,MAAMA;gBACNL,SAAS;gBACTM,UAAUA;gBACVS,YAAY;oBAAEJ;gBAAe;gBAC7BJ,OAAOA;gBACN,GAAGL,cAAc;;QAGxB;;AAGN,GAAG;AAEHT,cAAcuB,WAAW,GAAG;AAUrB,MAAMC,YAAgC,CAACvB,QAAU;IACtD,MAAM,EACJE,GAAE,EACFsB,KAAI,EACJC,gBAAe,EACfP,YAAW,EACXQ,QAAO,EACPjB,WAAU,EACVkB,UAAUC,kBAAiB,EAC3B,GAAGZ,MACJ,GAAGhB;IAEJ,MAAM,EAAE2B,UAAUE,oBAAmB,EAAE,GAAGH,WAAW,CAAC;IAEtD,MAAM,EAAEI,GAAGC,UAAS,EAAE,GAAGnC,4DAAcA;IAEvC,MAAMoC,uBAAuB;QAAER;QAAMS,cAAc;QAAI,GAAGR,eAAe;IAAC;IAE1E,MAAM,EACJS,OAAO,EAAErB,MAAK,EAAED,SAAQ,EAAEX,IAAG,EAAE,GAC/BkC,YAAY,EAAE5B,MAAK,EAAE,GACtB,GAAGV,8DAAaA,CAACmC;IAElB,MAAMI,kBAAkBzC,qFAAkBA,CAACqC;IAC3C,MAAMK,aAAaD,mBAAmBP,uBAAuBD;IAE7D,qBACE,mDAAC7B;QACCG,IAAIA,MAAMsB;QACVG,UAAUU;QACVxB,OAAOA;QACPD,UAAUA;QACVM,aAAa,OAAOA,gBAAgB,WAAWa,UAAUb,eAAeA,WAAW;QACnFX,OAAO,CAAC,CAACA;QACTE,YAAYA,cAAcF,OAAO+B;QACjCrC,KAAKA;QACJ,GAAGe,IAAI;QACP,GAAGU,OAAO;;AAGjB,EAAE;AAEF,sEAAeH,gDAAAA,SAASA,EAAAA,EAAC;;;;;;;;;;;;;;;;;AC7HG;;;;;;;;;;;;;ACArB,MAAMgB,yBAAyB,CAACC,SAAmC;IACxE,IAAIA,QAAQC,WAAW,OAAO;QAC5B,OAAO;IACT,CAAC;IAED,OAAO;AACT,EAAE","sources":["webpack:///./src/components/inputs/TextInput/TextInput.tsx","webpack:///./src/components/inputs/TextInput/index.ts","webpack:///./src/helpers/getDirectionFromLocale/getDirectionFromLocale.ts"],"sourcesContent":["import { FC, forwardRef } from 'react';\n\nimport { TextField, TextFieldProps } from '@mui/material';\nimport { PickWithPartial, StyledRootProps, WithRootProps } from '@packages/types';\nimport { useIsRequiredInput } from 'hooks/useIsRequiredInput';\nimport { useTranslation } from 'next-i18next';\nimport { useController, UseControllerProps } from 'react-hook-form';\nimport { InputTemplate, InputTemplateProps } from 'templates/InputTemplate';\n\nexport type TextInputViewProps = WithRootProps<\n  Partial<InputTemplateProps>,\n  Pick<\n    TextFieldProps,\n    'placeholder' | 'onChange' | 'value' | 'multiline' | 'type' | 'maxRows' | 'rows'\n  > & {\n    textFieldProps?: Partial<TextFieldProps>;\n  }\n>;\n\nexport const TextInputView = forwardRef((props: TextInputViewProps, ref) => {\n  const {\n    id,\n    label,\n    sx,\n    className,\n    fullWidth = true,\n    error,\n    textFieldProps,\n    helperText,\n    multiline,\n    type,\n    onChange,\n    value,\n    startIcon,\n    rows,\n    ...rest\n  } = props;\n  return (\n    <InputTemplate\n      id={id || ''}\n      label={label}\n      sx={sx}\n      className={className}\n      fullWidth={fullWidth}\n      error={!!error}\n      helperText={helperText}\n      value={value}\n      startIcon={startIcon}\n      {...rest}\n    >\n      {({ error, id, startAdornment, placeholder }) => {\n        return (\n          <TextField\n            variant=\"outlined\"\n            id={id}\n            inputRef={ref}\n            placeholder={placeholder}\n            error={error}\n            multiline={multiline}\n            rows={rows}\n            type={type}\n            fullWidth\n            onChange={onChange}\n            InputProps={{ startAdornment }}\n            value={value}\n            {...textFieldProps}\n          />\n        );\n      }}\n    </InputTemplate>\n  );\n});\n\nTextInputView.displayName = 'TextInputView';\n\nexport interface TextInputProps\n  extends StyledRootProps,\n    PickWithPartial<TextInputViewProps, 'value' | 'onChange' | 'error'>,\n    Pick<UseControllerProps, 'name'> {\n  controllerProps?: Partial<UseControllerProps>;\n  options?: Partial<TextInputViewProps>;\n}\n\nexport const TextInput: FC<TextInputProps> = (props) => {\n  const {\n    id,\n    name,\n    controllerProps,\n    placeholder,\n    options,\n    helperText,\n    required: requiredFromProps,\n    ...rest\n  } = props;\n\n  const { required: requiredFromOptions } = options || {};\n\n  const { t: translate } = useTranslation();\n\n  const finalControllerProps = { name, defaultValue: '', ...controllerProps };\n\n  const {\n    field: { value, onChange, ref },\n    fieldState: { error },\n  } = useController(finalControllerProps);\n\n  const isInputRequired = useIsRequiredInput(finalControllerProps);\n  const isRequired = isInputRequired || requiredFromOptions || requiredFromProps;\n\n  return (\n    <TextInputView\n      id={id || name}\n      required={isRequired}\n      value={value}\n      onChange={onChange}\n      placeholder={typeof placeholder === 'string' ? translate(placeholder) : placeholder}\n      error={!!error}\n      helperText={helperText || error?.message}\n      ref={ref}\n      {...rest}\n      {...options}\n    />\n  );\n};\n\nexport default TextInput;\n","export * from './TextInput';\n","export const getDirectionFromLocale = (locale?: string): 'ltr' | 'rtl' => {\n  if (locale?.startsWith('he')) {\n    return 'rtl';\n  }\n\n  return 'ltr';\n};\n"],"names":["forwardRef","TextField","useIsRequiredInput","useTranslation","useController","InputTemplate","TextInputView","props","ref","id","label","sx","className","fullWidth","error","textFieldProps","helperText","multiline","type","onChange","value","startIcon","rows","rest","startAdornment","placeholder","variant","inputRef","InputProps","displayName","TextInput","name","controllerProps","options","required","requiredFromProps","requiredFromOptions","t","translate","finalControllerProps","defaultValue","field","fieldState","isInputRequired","isRequired","message","getDirectionFromLocale","locale","startsWith"],"sourceRoot":""}