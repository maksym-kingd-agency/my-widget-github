{"version":3,"file":"319.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAE+E;AAEjC;AAET;AAErC,MAAMI,SAAS;AAER,MAAMC,iBAAiB;IAC5BC,OAAO,CAAC,EAAEF,OAAO,MAAM,CAAC;AAC1B,EAAE;AAiBF,MAAMG,gBAAgBJ,wDAAMA,CAAC,OAAO;IAAEK,MAAM;IAAiBF,OAAO,CAAC,QAAQ,EAAEF,OAAO,CAAC;AAAC,GACtF,CAAC,EAAEK,MAAK,EAAE,GAAK;IACb,OAAO;QACL,CAAC,CAAC,GAAG,EAAEJ,eAAeC,KAAK,CAAC,CAAC,CAAC,EAAE;YAC9BI,SAAS;YACTC,UAAU;YACV,GAAGF,MAAMG,UAAU,CAACC,KAAK;YACzBC,OAAOL,MAAMM,OAAO,CAACC,IAAI,CAACC,OAAO;YACjCC,QAAQ;YACRC,cAAc;YACdC,WAAW;QACb;QACA,CAAC,CAAC,GAAG,EAAEnB,kEAAuB,CAAC,CAAC,CAAC,EAAE;YACjCa,OAAOL,MAAMM,OAAO,CAACM,KAAK,CAACC,IAAI;QACjC;IACF;AACF;AAGF;;;;CAIC,GACM,SAASC,QAAQC,KAAmB,EAAE;IAC3C,MAAM,EAAEC,SAAQ,EAAEC,UAAS,EAAEpB,MAAK,EAAEqB,GAAE,EAAE,GAAGC,MAAM,GAAGJ;IACpD,MAAM,EAAEK,EAAC,EAAE,GAAG3B,4DAAcA;IAE5B,qBACE,wDAACK;QAAcmB,WAAWA;QAAWC,IAAIA;;YACtCrB,uBACC,mDAACN,qDAAUA;gBAAC0B,WAAWrB,eAAeC,KAAK;gBAAG,GAAGsB,IAAI;0BAClD,OAAOtB,UAAU,WAAWuB,EAAEvB,SAASA,KAAK;;YAGhDmB;;;AAGP,CAAC;AAED,sEAAeF,gDAAAA,OAAOA,EAAAA,EAAC;;;;;;;;;;;;;;;;;;ACrEG;;;;;;;;;;;;;;;;;ACAwB;AAM3C,MAAMS,8BAAgBF,oDAAaA,CAAqB,IAAI,EAAE;AAE9D,MAAMG,wBAAwBD,cAAcE,QAAQ,CAAC;AAErD,MAAMC,mBAAmB,IAAM;IACpC,OAAOJ,iDAAUA,CAACC;AACpB,EAAE;AAEF,iEAAeC,qBAAqBA,EAAC;;;;;;;;;;;;;;;;;;;;;;;ACda;AAQ3B;AAEoC;AACT;AA0C3C,SAASS,cAAclB,KAAyB,EAAE;IACvD,MAAM,EACJC,SAAQ,EACRnB,MAAK,EACLqC,YAAW,EACXC,GAAE,EACFvB,OAAQ,KAAK,GACbK,UAAS,EACTmB,WAAY,IAAI,GAChBlB,GAAE,EACFmB,WAAU,EACVC,iBAAgB,EAChBC,UAAS,EACTC,MAAK,EACLC,wBAAyB,KAAK,GAC9B,GAAGtB,MACJ,GAAGJ;IAEJ,MAAM2B,YAAYV,yEAAYA,CAAC;QAAEW,UAAU;IAAS;IAEpD,MAAMC,QAAQjB,4CAAKA;IAEnB,MAAMkB,WAAWV,MAAMS;IAEvB,MAAME,oBAAoBlB,8CAAOA,CAAC,IAAM;QACtC,IAAImB,MAAMC,OAAO,CAACR,SAASA,MAAMS,MAAM,GAAG,IAAI,CAAC,CAACT,KAAK,EAAE;YACrD,OAAO;QACT,OAAO,IAAI5B,OAAO;YAChB,OAAO;QACT,OAAO;YACL,OAAO;QACT,CAAC;IACH,GAAG;QAACA;QAAO4B;KAAM;IAEjB,MAAMU,oBAAoBtB,8CAAOA,CAAC,IAAM;QACtC,IAAI,OAAOM,gBAAgB,UAAU;YACnC,OAAOA;QACT,CAAC;QAED,IAAI,OAAOrC,UAAU,UAAU;YAC7B,OAAO;QACT,CAAC;QAED,MAAMsD,iBAAiBtD,MAAMuD,WAAW;QAExC,IAAIL,MAAMC,OAAO,CAACR,QAAQ;YACxB,OAAOE,UAAU,sBAAsB;gBAAE7C,OAAOsD;YAAe;QACjE,CAAC;QAED,OAAOT,UAAU,oBAAoB;YAAE7C,OAAOsD;QAAe;IAC/D,GAAG;QAACtD;QAAOqC;QAAaQ;QAAWF;KAAM;IAEzC,qBACE,mDAAC1B,gEAAOA;QACNuC,SAASR;QACThD,OAAOA;QACPoB,WAAWA;QACXC,IAAIA;QACJN,OAAOA;QACN,GAAGO,IAAI;kBAER,sEAACU,sDAAWA;YACVjB,OAAOA;YACPwB,WAAWA;YACXlB,IAAIkB,YAAY;gBAAE,GAAGE,kBAAkBpB,EAAE;YAAC,IAAI;gBAAEoC,OAAO;gBAAQ,GAAGhB,kBAAkBpB,EAAE;YAAC,CAAC;YACxFqC,WAAW;YACV,GAAGjB,gBAAgB;;gBAEnBtB,SAAS;oBACRJ;oBACAuB,IAAIqB,OAAOX;oBACXX,aAAagB;oBACb,GAAG,CAAC,IACFX,aAAa;4BACXkB,8BACE,mDAAC1B,yDAAcA;gCACb7B,UAAS;gCACTgB,IAAI;oCACFb,OAAOyC;gCACT;0CAECP;;wBAGP,IAAI;gBACR;gBACC,CAACE,uCACA,mDAACX,yDAAcA;oBAAClB,OAAOA;8BACpByB,cAAc,IAAI,6BAA6B;qBAEhD,IAAI;;;;AAIhB,CAAC;AAED,sEAAeJ,gDAAAA,aAAaA,EAAAA,EAAC;;;;;;;;;;;;;;;;;ACrJG;;;;;;;;;;;;;;;;;;;;;;;;;;ACEc;AAEa;AACH;AAEW;AAGG;AACF;AAY7D,MAAM+B,WAAW,CAA2BjD,QAAiC;IAClF,MAAM,EAAEC,SAAQ,EAAEE,GAAE,EAAED,UAAS,EAAEkB,GAAE,EAAE8B,OAAM,EAAE,GAAGC,aAAa,GAAGnD;IAChE,MAAM,EAAEoD,SAAQ,EAAEC,SAAQ,EAAEC,SAAQ,EAAE,GAAGH;IAEzC,MAAM,EAAEI,kBAAiB,EAAE,GAAGX,+EAAeA;IAE7C,MAAMY,eAAe,OAAOC,SAA6B;QACvD,IAAI,CAACL,UAAU;YACb;QACF,CAAC;QAED,IAAI;YACF,MAAMA,SAASK;QACjB,EAAE,OAAO5D,OAAO;YACd,MAAM,EAAE6D,OAAM,EAAE,GAAGX,4FAAoBA,CAAClD;YAExC,IAAI6D,QAAQ;gBACV,MAAMC,OAAOC,OAAOC,IAAI,CAACH,OAAO,CAAC,EAAE,IAAI,IAAI,+BAA+B;gBAC1EJ,SAASK;gBAETX,0FAAmBA,CAACU,QAAQL;gBAC5BE,kBAAkB1D,OAAO;oBAAE6D,QAAQ;gBAAQ;YAC7C,CAAC;QACH;IACF;IAEA,qBACE,mDAACZ,yDAAgBA;QAAE,GAAGK,WAAW;kBAC/B,iEAAC1C,wEAAqBA;YAACgB,OAAOyB,UAAU,IAAI;sBAC1C,iEAACP,8CAAGA;gBACFvB,IAAIA;gBACJlB,WAAWA;gBACXC,IAAIA;gBACJ2D,WAAU;gBACVV,UAAUD,YAAYK,YAAY,CAACA;gBACnCO,UAAU;0BAET9D;;;;AAKX,EAAE;;;;;;;;;;;;;;;;;ACjEsB;AAOxB,MAAMgE,yBAAyBD,yCAAQ,CAAC;IACtCG,UAAUH,yCAAQ,CAAC;QACjBI,MAAMJ,yCAAQ,CAAC;YACbK,SAASL,yCAAQ,GAAGO,QAAQ;YAC5Bb,QAAQM,yCAAQ,CAACA,wCAAO,CAACA,yCAAQ,KAAKO,QAAQ;QAChD;IACF;AACF;AAEO,MAAMxB,uBAAuB,CAAClD,QAAuC;IAC1E,MAAM6E,sBAAsBT,uBAAuBU,SAAS,CAAC9E;IAC7D,MAAM+E,iBAAiB;IAEvB,IAAIF,oBAAoBG,OAAO,EAAE;QAC/B,MAAM,EACJT,MAAM,EACJD,UAAU,EACRC,MAAM,EAAEV,OAAM,EAAEW,SAASS,aAAY,EAAE,GACxC,GACF,GACF,GAAGJ;QACJ,MAAML,UAAUS,gBAAgBF;QAEhC,OAAO;YAAEP;YAASX;QAAO;IAC3B,CAAC;IAED,MAAMqB,UAAU,CAAClF,QAAmC;QAClD,OAAOA,iBAAiBmF;IAC1B;IAEA,IAAID,QAAQlF,QAAQ;QAClB,MAAMwE,UAAUxE,MAAMwE,OAAO;QAC7B,OAAO;YAAEA;QAAQ;IACnB,CAAC;IAED,OAAO;QACLA,SAASO;IACX;AACF,EAAE;;;;;;;;;;;;;;;;;AC7CqC;;;;;;;;;;;;;ACIhC,MAAM5B,sBAAsB,CACjCU,QACAL,WACG;IACH,IAAIK,UAAUL,UAAU;QACtBO,OAAOC,IAAI,CAACH,QAAQuB,OAAO,CAAC,CAACC,MAAQ;YACnC7B,SAAS6B,KAAK;gBACZC,MAAM;gBACNd,SAASX,MAAM,CAACwB,IAAI,EAAEE,KAAK;YAC7B;QACF;IACF,CAAC;AACH,EAAE;;;;;;;;;;;;;;;AChByB;;;;;;;;;;;;;;;;;;;;ACAc;AAIlC,MAAME,wBAAwB,CACnCC,SACgC;IAChC,MAAM,EAAEC,UAAS,EAAEC,QAAO,EAAEC,WAAY,MAAK,EAAEC,kBAAiB,EAAE,GAAGJ;IAErE,IAAI,CAACC,aAAa,CAACC,SAAS,OAAO;IAEnC,MAAMG,qBAAqBJ,YAAYH,gBAAUA,CAACG,WAAWG,qBAAqB,EAAE;IACpF,MAAME,mBAAmBJ,UAAUJ,gBAAUA,CAACI,SAASE,qBAAqB,EAAE;IAE9E,IAAIH,cAAcC,SAAS;QACzB,OAAO,CAAC,EAAEG,mBAAmB,EAAEF,UAAU,CAAC;IAC5C,CAAC;IAED,OAAO,CAAC,EAAEE,mBAAmB,EAAEF,UAAU,EAAEG,iBAAiB,CAAC;AAC/D,EAAE;;;ACnBsC;;;;;;;;;;;;;;;ACAN;;;;;;;;;;;;;;;;;;;;;;;ACAE;AAGY;AACnB;AACsD;AAE5E,MAAMI,wBAAwB,IAAI;AAElC,MAAMrD,kBAAkB,IAAM;IACnC,MAAM,EAAEsD,gBAAe,EAAE,GAAGH,uEAAWA;IAEvC,MAAMxC,oBAAoBuC,kDAAWA,CACnC,CAACjG,OAAgBsG,UAAwC;QACvD,MAAMC,SAASJ,iDAAGA,CAACnG,OAAO;QAE1B,MAAM,EAAE6D,QAAQ2C,aAAa,QAAQ,GAAEhC,SAASiC,cAAc,WAAW,GAAE,GAAGH,WAAW,CAAC;QAE1F,MAAM,EAAEzC,OAAM,EAAEW,QAAO,EAAE,GAAGtB,0GAAoBA,CAAClD;QAEjD,MAAM0G,mBAAmBF,eAAe;QACxC,MAAMG,oBACJ,CAACF,gBAAgB,YAAa,CAAC5C,UAAU4C,gBAAgB,WAAW,KACpEF,WAAWH;QAEb,IAAIvC,UAAU6C,kBAAkB;YAC9B,MAAME,gBAAgB7C,OAAOH,MAAM,CAACC,QAAQgD,IAAI,GAAGC,KAAK,CAAC,GAAG;YAE5DF,cAAcxB,OAAO,CAAC,CAACZ,UAAY;gBACjC6B,gBAAgB7B,SAAS;oBAAEuC,SAAS;gBAAQ;YAC9C;QACF,CAAC;QAED,IAAIvC,WAAWmC,mBAAmB;YAChCN,gBAAgB7B,SAAS;gBAAEuC,SAAS;YAAQ;QAC9C,CAAC;IACH,GACA;QAACV;KAAgB;IAGnB,OAAO;QAAE3C;IAAkB;AAC7B,EAAE;;;;;;;;;;;;;;;;;ACzCwB;;;;;;;;;;;;;;;;;;ACA4B;AAK7B;AAYlB,MAAMuD,UAAU,CACrB9G,QAA8B,CAAC,CAAC,GACN;IAC1B,MAAM,EAAEgH,iBAAgB,EAAE,GAAGC,eAAe,GAAGjH;IAE/C,MAAMkH,OAAOH,wDAAWA,CAAC;QACvB,GAAGE,aAAa;QAChBE,UAAUH,mBAAmBH,oEAAWA,CAACG,oBAAoBI,SAAS;IACxE;IAEA,OAAO;QACL,GAAGF,IAAI;QACPhE,QAAQ8D;IACV;AACF,EAAE;;;;;;;;;;;;;;;;;;;AC/B2B;AAYtB,MAAMK,iBAAiB,CAACnE,SAA+C;IAC5E,MAAMoE,QAAQtB,iDAAGA,CAAC9C,QAAQ;IAC1B,OAAOoE,iBAAiB1D;AAC1B,EAAE;AAEK,MAAM2D,gBAAgB,CAACrE,SAAsD;IAClF,OAAO,aAAaA;AACtB,EAAE;AAEK,MAAMsE,gBAAgB,CAACtE,SAA0C;IACtE,MAAMuE,QAAQzB,iDAAGA,CAAC9C,QAAQ;IAC1B,OAAOuE,iBAAiBzF;AAC1B,EAAE;AAEK,MAAM0F,gBAAgB,CAC3BxE,SACsD;IACtD,MAAMiD,UAAUH,iDAAGA,CAAC9C,QAAQ;IAC5B,MAAMyE,aAAa3B,iDAAGA,CAAC9C,QAAQ;IAC/B,OAAOiD,mBAAmBnE,SAAS,OAAO2F,eAAe;AAC3D,EAAE;AAEK,MAAMC,6BAA6B,CACxC1E,SACmF;IACnF,MAAMiD,UAAUH,iDAAGA,CAAC9C,QAAQ;IAC5B,OAAOiD,mBAAmB0B;AAC5B,EAAE;;;;;;;;;;;;;;;ACvCmC;;;;;;;;;;;;;;;;;;;;;ACAyC;AACjD;AACkC;AASjC;AAE9B,MAAME,wBAAwB,CAAC7E,SAA+B;IAC5D,MAAM8E,aAAa9E,OAAO8E,UAAU;IACpC,MAAM,EAAEnD,SAASoD,iBAAgB,EAAE,GAAG/E,OAAOyB,SAAS,CAAC;IAEvD,OAAO,CAACqD,cAAc,CAACC;AACzB;AAQA,MAAMC,8BAA8B,CAAC3C,SAAuD;IAC1F,MAAM,EAAEvG,KAAI,EAAEkE,OAAM,EAAEO,OAAM,EAAE,GAAG8B;IAEjC,MAAM,CAAC4C,WAAW,EAAE,EAAE,GAAGC,oBAAoB,GAAGpJ,KAAKqJ,KAAK,CAAC;IAC3D,MAAMC,cAAcF,oBAAoBhD,IAAI,CAAC;IAC7C,MAAMmD,eAAeH,oBAAoBlG,MAAM,GAAG;IAElD,MAAMsG,eAAexC,iDAAGA,CAACvC,QAAQ0E;IAEjC,IAAId,6EAAcA,CAACnE,SAAS;QAC1B;;;;KAIC,GACD,MAAMuF,eAAezC,iDAAGA,CAAC9C,OAAOoE,KAAK,EAAEa,UAAUf;QACjD,IAAI,CAACqB,cAAc,OAAO,KAAK;QAE/B,IAAIF,cAAc;YAChB,OAAOL,4BAA4B;gBACjClJ,MAAMsJ;gBACNpF,QAAQuF;gBACRhF,QAAQ+E;YACV;QACF,CAAC;QAED,OAAOT,sBAAsBU;IAC/B,CAAC;IAED,IAAIlB,4EAAaA,CAACrE,SAAS;QACzB,MAAMwF,kBAAkBC,OAAOR;QAC/B,MAAMS,uBAAuBD,OAAOE,SAAS,CAACH;QAE9C,IAAI,CAACE,sBAAsB,OAAO,KAAK;QAEvC,MAAM,EAAEE,SAASC,cAAa,EAAE,GAAG7F;QAEnC,IAAIqF,cAAc;YAChB,OAAOL,4BAA4B;gBACjClJ,MAAMsJ;gBACNpF,QAAQ6F;gBACRtF,QAAQ+E;YACV;QACF,CAAC;QAED,OAAOT,sBAAsBgB;IAC/B,CAAC;IAED,IAAIvB,4EAAaA,CAACtE,SAAS;QACzB,MAAMwF,kBAAkBC,OAAOR;QAC/B,MAAMS,uBAAuBD,OAAOE,SAAS,CAACH;QAE9C,IAAI,CAACE,sBAAsB,OAAO,KAAK;QAEvC,MAAM,EAAEnB,MAAK,EAAE,GAAGvE;QAClB,MAAM8F,aAAavB,KAAK,CAACiB,gBAAgB;QAEzC,IAAI,CAACM,YAAY,OAAO,KAAK;QAE7B,IAAIT,cAAc;YAChB,OAAOL,4BAA4B;gBACjClJ,MAAMsJ;gBACNpF,QAAQ8F;gBACRvF,QAAQ+E;YACV;QACF,CAAC;QAED,OAAOT,sBAAsBiB;IAC/B,CAAC;IAED,IAAItB,4EAAaA,CAACxE,SAAS;QACzB,MAAM,EAAEiD,QAAO,EAAE,GAAGjD;QAEpB,OAAOiD,QAAQ8C,KAAK,CAAC,CAACC,eAAiB;YACrC,OAAOhB,4BAA4B;gBAAElJ;gBAAMkE,QAAQgG;gBAAczF;YAAO;QAC1E;IACF,CAAC;IAED,IAAImE,yFAA0BA,CAAC1E,SAAS;QACtC,MAAM,EAAEyE,WAAU,EAAEwB,cAAa,EAAE,GAAGjG;QAEtC,MAAMkG,qBAAqBpD,iDAAGA,CAACvC,QAAQ0F;QAEvC,MAAME,iBAAiB1B,WAAW3B,GAAG,CAACoD;QAEtC,IAAI,CAACC,gBAAgB,OAAO,KAAK;QAEjC,OAAOnB,4BAA4B;YACjClJ;YACAkE,QAAQmG;YACR5F;QACF;IACF,CAAC;IAED,OAAO,KAAK;AACd;AAIO,MAAM6F,qBAAqB,CAACC,QAA4C;IAC7E,MAAM,EAAEvK,KAAI,EAAEwK,MAAK,EAAE,GAAGD;IAExB,MAAM9F,SAASqE,yDAAQA;IACvB,MAAM5E,SAASvC,kFAAgBA;IAE/B,IAAI,CAAC3B,MAAM,OAAO,KAAK;IAEvB,IAAIkE,QAAQ;QACV,OAAOgF,4BAA4B;YAAElJ;YAAMkE;YAAQO;QAAO;IAC5D,CAAC;IAED,MAAMgG,yBAAyBC,QAAQF,OAAOG;IAE9C,OAAOF;AACT,EAAE","sources":["webpack:///./src/components/Labeled/Labeled.tsx","webpack:///./src/components/Labeled/index.ts","webpack:///./src/components/contexts/SchemaContext.tsx","webpack:///./src/components/templates/InputTemplate/InputTemplate.tsx","webpack:///./src/components/templates/InputTemplate/index.ts","webpack:///./src/components/views/FormView/FormView.tsx","webpack:///./src/components/views/FormView/helpers/getMessagesFromError/getMessagesFromError.ts","webpack:///./src/components/views/FormView/helpers/getMessagesFromError/index.ts","webpack:///./src/components/views/FormView/helpers/setSubmissionErrors/setSubmissionErrors.ts","webpack:///./src/components/views/FormView/index.ts","webpack:///./src/helpers/getFormattedDateRange/getFormattedDateRange.ts","webpack:///./src/helpers/getFormattedDateRange/index.ts","webpack:///./src/hooks/useErrorHandler/index.ts","webpack:///./src/hooks/useErrorHandler/useErrorHandler.tsx","webpack:///./src/hooks/useForm/index.ts","webpack:///./src/hooks/useForm/useForm.tsx","webpack:///./src/hooks/useIsRequiredInput/helpers/typeguards.ts","webpack:///./src/hooks/useIsRequiredInput/index.ts","webpack:///./src/hooks/useIsRequiredInput/useIsRequiredInput.ts"],"sourcesContent":["import { ReactNode } from 'react';\n\nimport { InputLabel, inputLabelClasses, InputLabelProps } from '@mui/material';\nimport { StyledRootProps } from '@packages/types';\nimport { useTranslation } from 'next-i18next';\n\nimport { styled } from '../../theme';\n\nconst PREFIX = 'Labeled';\n\nexport const LabeledClasses = {\n  label: `${PREFIX}-label`,\n};\nexport interface LabeledProps\n  extends StyledRootProps,\n    Omit<InputLabelProps, keyof StyledRootProps> {\n  children: ReactNode;\n  /**\n   * label\n   * Empty stringtakes place for a label\n   */\n  label?: ReactNode;\n  /**\n   * htmlFor\n   * Pass input 'id' to focus input on label click\n   */\n  htmlFor?: string;\n}\n\nconst StyledLabeled = styled('div', { name: 'StyledLabeled', label: `Sapiens-${PREFIX}` })(\n  ({ theme }) => {\n    return {\n      [`& .${LabeledClasses.label}`]: {\n        display: 'block',\n        position: 'static',\n        ...theme.typography.body2,\n        color: theme.palette.text.primary,\n        margin: 0,\n        marginBottom: 5,\n        transform: 'translate(0)', // override MuiFormLabel styles (if label is wrapped with FormControl)\n      },\n      [`& .${inputLabelClasses.error}`]: {\n        color: theme.palette.error.main,\n      },\n    };\n  },\n);\n\n/**\n * Labeled\n * Note: Somewhy \"click\" event on label with `Labeled` does not focus input if `Labeled` is inside `FormControl`.\n * So use it outside `FormControl` and pass `error` prop\n */\nexport function Labeled(props: LabeledProps) {\n  const { children, className, label, sx, ...rest } = props;\n  const { t } = useTranslation();\n\n  return (\n    <StyledLabeled className={className} sx={sx}>\n      {label && (\n        <InputLabel className={LabeledClasses.label} {...rest}>\n          {typeof label === 'string' ? t(label) : label}\n        </InputLabel>\n      )}\n      {children}\n    </StyledLabeled>\n  );\n}\n\nexport default Labeled;\n","export * from './Labeled';\n","import { createContext, useContext } from 'react';\n\nimport { ZodSchema } from 'zod';\n\nexport type SchemaContextValue = ZodSchema | null;\n\nexport const SchemaContext = createContext<SchemaContextValue>(null);\n\nexport const SchemaContextProvider = SchemaContext.Provider;\n\nexport const useSchemaContext = () => {\n  return useContext(SchemaContext);\n};\n\nexport default SchemaContextProvider;\n","import { ReactNode, useId, useMemo } from 'react';\n\nimport {\n  FormControl,\n  FormControlProps,\n  FormHelperText,\n  FormHelperTextProps,\n  InputAdornment,\n} from '@mui/material';\nimport { StyledRootProps } from '@packages/types';\nimport { Labeled, LabeledProps } from 'components/Labeled';\nimport { useTranslate } from 'hooks/useTranslate';\n\nexport interface InputTemplateChildrenParams {\n  /** pass to input to focus on label click */\n  id: string | undefined;\n  /** pass to input to control error styles */\n  error: boolean;\n  startAdornment?: ReactNode;\n  placeholder: string;\n}\n\n// Non conditional (\"?:\") types used below to not forget to pass it\nexport interface InputTemplateProps\n  extends StyledRootProps,\n    Omit<Partial<LabeledProps>, 'children'> {\n  /** We could use union with ReactNode here. But we use function only here to not forget to use 'id' prop and maybe some feature one */\n  children: (params: InputTemplateChildrenParams) => ReactNode;\n  label: LabeledProps['label'];\n  id?: string;\n  error: boolean | undefined;\n  fullWidth?: boolean;\n  helperText: FormHelperTextProps['children'];\n  formControlProps?: Partial<FormControlProps>;\n  value?: unknown;\n  /**\n   * This prop must be passed only into InputTemplate component and go into Input\n   * * @example\n   * <InputTemplate>{\n   *   (inputProps) => {\n   *     return (\n   *        <Select startAdornment={inputProps.startAdornment}>....</Select>\n   *     )\n   *   }\n   * }</InputTemplate>\n   */\n  startIcon?: ReactNode;\n  /**\n   * Pass this ptop to not render helperText + empty space also\n   */\n  withoutHelperTextSpace?: boolean;\n}\n\nexport function InputTemplate(props: InputTemplateProps) {\n  const {\n    children,\n    label,\n    placeholder,\n    id,\n    error = false,\n    className,\n    fullWidth = true,\n    sx,\n    helperText,\n    formControlProps,\n    startIcon,\n    value,\n    withoutHelperTextSpace = false,\n    ...rest\n  } = props;\n\n  const translate = useTranslate({ basePath: 'inputs' });\n\n  const ownId = useId();\n\n  const resultId = id || ownId;\n\n  const getAbornmentColor = useMemo(() => {\n    if (Array.isArray(value) ? value.length > 0 : !!value) {\n      return 'primary.main';\n    } else if (error) {\n      return 'error.main';\n    } else {\n      return 'text.secondary';\n    }\n  }, [error, value]);\n\n  const customPlaceholder = useMemo(() => {\n    if (typeof placeholder === 'string') {\n      return placeholder;\n    }\n\n    if (typeof label !== 'string') {\n      return '';\n    }\n\n    const lowercaseLabel = label.toLowerCase();\n\n    if (Array.isArray(value)) {\n      return translate('select.placeholder', { label: lowercaseLabel });\n    }\n\n    return translate('text.placeholder', { label: lowercaseLabel });\n  }, [label, placeholder, translate, value]);\n\n  return (\n    <Labeled\n      htmlFor={resultId} /* Focus on label click works if it is outside FormControl */\n      label={label}\n      className={className}\n      sx={sx}\n      error={error}\n      {...rest}\n    >\n      <FormControl\n        error={error}\n        fullWidth={fullWidth}\n        sx={fullWidth ? { ...formControlProps?.sx } : { width: 'auto', ...formControlProps?.sx }}\n        hiddenLabel\n        {...formControlProps}\n      >\n        {children({\n          error,\n          id: String(resultId),\n          placeholder: customPlaceholder,\n          ...(() =>\n            startIcon && {\n              startAdornment: (\n                <InputAdornment\n                  position=\"start\"\n                  sx={{\n                    color: getAbornmentColor,\n                  }}\n                >\n                  {startIcon}\n                </InputAdornment>\n              ),\n            })(),\n        })}\n        {!withoutHelperTextSpace ? (\n          <FormHelperText error={error}>\n            {helperText || ' ' /* Empty space to keep space */}\n          </FormHelperText>\n        ) : null}\n      </FormControl>\n    </Labeled>\n  );\n}\n\nexport default InputTemplate;\n","export * from './InputTemplate';\n","import { ReactNode } from 'react';\n\nimport { Box, BoxProps } from '@mui/material';\nimport { StyledRootProps } from '@packages/types';\nimport SchemaContextProvider from 'contexts/SchemaContext';\nimport { useErrorHandler } from 'hooks/useErrorHandler';\nimport { UseFormReturn } from 'hooks/useForm';\nimport { FormProvider as HookFormProvider } from 'react-hook-form';\nimport { z, ZodSchema } from 'zod';\n\nimport { getMessagesFromError } from './helpers/getMessagesFromError';\nimport { setSubmissionErrors } from './helpers/setSubmissionErrors';\n\nexport interface FormViewOwnProps<Schema extends ZodSchema = ZodSchema>\n  extends StyledRootProps,\n    Pick<BoxProps, 'id'> {\n  children: ReactNode;\n  onSubmit?: (data: z.output<Schema>) => void | Promise<void>;\n}\n\nexport type FormViewProps<Schema extends ZodSchema = ZodSchema> = UseFormReturn<Schema> &\n  FormViewOwnProps<Schema>;\n\nexport const FormView = <Schema extends ZodSchema>(props: FormViewProps<Schema>) => {\n  const { children, sx, className, id, schema, ...formMethods } = props;\n  const { onSubmit, setError, setFocus } = formMethods;\n\n  const { handleQueryErrors } = useErrorHandler();\n\n  const handleSubmit = async (values: z.output<Schema>) => {\n    if (!onSubmit) {\n      return;\n    }\n\n    try {\n      await onSubmit(values);\n    } catch (error) {\n      const { errors } = getMessagesFromError(error);\n\n      if (errors) {\n        const path = Object.keys(errors)[0] || ''; // get first path with an error\n        setFocus(path);\n\n        setSubmissionErrors(errors, setError);\n        handleQueryErrors(error, { errors: 'never' });\n      }\n    }\n  };\n\n  return (\n    <HookFormProvider {...formMethods}>\n      <SchemaContextProvider value={schema || null}>\n        <Box\n          id={id}\n          className={className}\n          sx={sx}\n          component=\"form\"\n          onSubmit={formMethods.handleSubmit(handleSubmit)}\n          noValidate\n        >\n          {children}\n        </Box>\n      </SchemaContextProvider>\n    </HookFormProvider>\n  );\n};\n","import { z } from 'zod';\n\nexport interface ErrorResponseData {\n  message?: string;\n  errors?: Record<string, string[]>;\n}\n\nconst zodResponseErrorSchema = z.object({\n  response: z.object({\n    data: z.object({\n      message: z.string().optional(),\n      errors: z.record(z.array(z.string())).optional(),\n    }),\n  }),\n});\n\nexport const getMessagesFromError = (error?: unknown): ErrorResponseData => {\n  const parsedResponseError = zodResponseErrorSchema.safeParse(error);\n  const defaultMessage = 'notification.http_error';\n\n  if (parsedResponseError.success) {\n    const {\n      data: {\n        response: {\n          data: { errors, message: errorMessage },\n        },\n      },\n    } = parsedResponseError;\n    const message = errorMessage || defaultMessage;\n\n    return { message, errors };\n  }\n\n  const isError = (error: unknown): error is Error => {\n    return error instanceof Error;\n  };\n\n  if (isError(error)) {\n    const message = error.message;\n    return { message };\n  }\n\n  return {\n    message: defaultMessage,\n  };\n};\n","export * from './getMessagesFromError';\n","import { FieldValues, UseFormSetError } from 'react-hook-form';\n\nimport { ErrorResponseData } from '../getMessagesFromError';\n\nexport const setSubmissionErrors = (\n  errors?: ErrorResponseData['errors'],\n  setError?: UseFormSetError<FieldValues>,\n) => {\n  if (errors && setError) {\n    Object.keys(errors).forEach((key) => {\n      setError(key, {\n        type: 'server',\n        message: errors[key]?.join('. '),\n      });\n    });\n  }\n};\n","export * from './FormView';\n","import formatDate from 'date-fns/format';\n\nimport { GetFormattedDateRangeParams, GetFormattedDateRangeReturn } from './types';\n\nexport const getFormattedDateRange = (\n  params: GetFormattedDateRangeParams,\n): GetFormattedDateRangeReturn => {\n  const { startDate, endDate, separator = ' - ', dateDisplayFormat } = params;\n\n  if (!startDate && !endDate) return '';\n\n  const formattedStartDate = startDate ? formatDate(startDate, dateDisplayFormat) : '';\n  const formattedEndDate = endDate ? formatDate(endDate, dateDisplayFormat) : '';\n\n  if (startDate === endDate) {\n    return `${formattedStartDate}${separator}`;\n  }\n\n  return `${formattedStartDate}${separator}${formattedEndDate}`;\n};\n","export * from './getFormattedDateRange';\n","export * from './useErrorHandler';\n","import { useCallback } from 'react';\n\nimport { QueryMeta } from '@packages/types';\nimport { useSnackbar } from 'hooks/useSnackbar';\nimport { get } from 'lodash';\nimport { getMessagesFromError } from 'views/FormView/helpers/getMessagesFromError';\n\nexport const HTTP_NOT_FOUND_STATUS = 404;\n\nexport const useErrorHandler = () => {\n  const { enqueueSnackbar } = useSnackbar();\n\n  const handleQueryErrors = useCallback(\n    (error: unknown, options?: QueryMeta['errorOptions']) => {\n      const status = get(error, 'response.status');\n\n      const { errors: showErrors = 'always', message: showMessage = 'no-errors' } = options || {};\n\n      const { errors, message } = getMessagesFromError(error);\n\n      const shouldShowErrors = showErrors === 'always';\n      const shouldShowMessage =\n        (showMessage === 'always' || (!errors && showMessage === 'no-errors')) &&\n        status !== HTTP_NOT_FOUND_STATUS;\n\n      if (errors && shouldShowErrors) {\n        const messagesArray = Object.values(errors).flat().slice(0, 2);\n\n        messagesArray.forEach((message) => {\n          enqueueSnackbar(message, { variant: 'error' });\n        });\n      }\n\n      if (message && shouldShowMessage) {\n        enqueueSnackbar(message, { variant: 'error' });\n      }\n    },\n    [enqueueSnackbar],\n  );\n\n  return { handleQueryErrors };\n};\n","export * from './useForm';\n","import { zodResolver } from '@hookform/resolvers/zod';\nimport {\n  useForm as useHookForm,\n  UseFormProps as UseHookFormProps,\n  UseFormReturn as UseHookFormReturn,\n} from 'react-hook-form';\nimport { ZodSchema } from 'zod';\n\nexport interface UseFormProps<Schema extends ZodSchema = ZodSchema>\n  extends Omit<UseHookFormProps, 'resolver'> {\n  validationSchema?: Schema;\n}\n\nexport interface UseFormReturn<Schema extends ZodSchema> extends UseHookFormReturn {\n  schema?: UseFormProps<Schema>['validationSchema'];\n}\n\nexport const useForm = <Schema extends ZodSchema>(\n  props: UseFormProps<Schema> = {},\n): UseFormReturn<Schema> => {\n  const { validationSchema, ...originalProps } = props;\n\n  const form = useHookForm({\n    ...originalProps,\n    resolver: validationSchema ? zodResolver(validationSchema) : undefined,\n  });\n\n  return {\n    ...form,\n    schema: validationSchema,\n  };\n};\n","import { get } from 'lodash';\nimport {\n  SomeZodObject,\n  ZodArray,\n  ZodDiscriminatedUnion,\n  ZodDiscriminatedUnionOption,\n  ZodSchema,\n  ZodTuple,\n  ZodTypeAny,\n  ZodUnion,\n} from 'zod';\n\nexport const isObjectSchema = (schema: ZodSchema): schema is SomeZodObject => {\n  const shape = get(schema, 'shape') as unknown;\n  return shape instanceof Object;\n};\n\nexport const isArraySchema = (schema: ZodSchema): schema is ZodArray<ZodTypeAny> => {\n  return 'element' in schema;\n};\n\nexport const isTupleSchema = (schema: ZodSchema): schema is ZodTuple => {\n  const items = get(schema, 'items') as unknown;\n  return items instanceof Array;\n};\n\nexport const isUnionSchema = (\n  schema: ZodSchema,\n): schema is ZodUnion<[ZodTypeAny, ...ZodTypeAny[]]> => {\n  const options = get(schema, 'options') as unknown;\n  const optionsMap = get(schema, 'optionsMap') as unknown;\n  return options instanceof Array && typeof optionsMap === 'undefined';\n};\n\nexport const isDiscriminatedUnionSchema = (\n  schema: ZodSchema,\n): schema is ZodDiscriminatedUnion<string, ZodDiscriminatedUnionOption<string>[]> => {\n  const options = get(schema, 'optionsMap') as unknown;\n  return options instanceof Map;\n};\n","export * from './useIsRequiredInput';\n","import { SchemaContextValue, useSchemaContext } from 'contexts/SchemaContext';\nimport { get } from 'lodash';\nimport { UseControllerProps, useWatch } from 'react-hook-form';\nimport { ZodSchema } from 'zod';\n\nimport {\n  isArraySchema,\n  isDiscriminatedUnionSchema,\n  isObjectSchema,\n  isTupleSchema,\n  isUnionSchema,\n} from './helpers/typeguards';\n\nconst checkIsSchemaRequired = (schema: ZodSchema): boolean => {\n  const isOptional = schema.isOptional();\n  const { success: canBeEmptyString } = schema.safeParse('');\n\n  return !isOptional && !canBeEmptyString;\n};\n\ninterface CheckIsNameRequiredInSchemaParams {\n  name: string;\n  schema: NonNullable<SchemaContextValue>;\n  values: unknown;\n}\n\nconst checkIsNameRequiredInSchema = (params: CheckIsNameRequiredInSchemaParams): boolean => {\n  const { name, schema, values } = params;\n\n  const [mainName = '', ...splittedNestedNames] = name.split('.');\n  const nestedNames = splittedNestedNames.join('.');\n  const isNameNested = splittedNestedNames.length > 0;\n\n  const nestedValues = get(values, mainName);\n\n  if (isObjectSchema(schema)) {\n    /**\n     * `get` returns `ZodTypeAny`, so we correct the return type\n     * by passing `undefined` as a default value because it's\n     * possible that `mainName` will not be in the `schema`\n     */\n    const nestedSchema = get(schema.shape, mainName, undefined);\n    if (!nestedSchema) return false;\n\n    if (isNameNested) {\n      return checkIsNameRequiredInSchema({\n        name: nestedNames,\n        schema: nestedSchema,\n        values: nestedValues,\n      });\n    }\n\n    return checkIsSchemaRequired(nestedSchema);\n  }\n\n  if (isArraySchema(schema)) {\n    const numericMainName = Number(mainName);\n    const isMainNameValidIndex = Number.isInteger(numericMainName);\n\n    if (!isMainNameValidIndex) return false;\n\n    const { element: elementSchema } = schema;\n\n    if (isNameNested) {\n      return checkIsNameRequiredInSchema({\n        name: nestedNames,\n        schema: elementSchema,\n        values: nestedValues,\n      });\n    }\n\n    return checkIsSchemaRequired(elementSchema);\n  }\n\n  if (isTupleSchema(schema)) {\n    const numericMainName = Number(mainName);\n    const isMainNameValidIndex = Number.isInteger(numericMainName);\n\n    if (!isMainNameValidIndex) return false;\n\n    const { items } = schema;\n    const itemSchema = items[numericMainName];\n\n    if (!itemSchema) return false;\n\n    if (isNameNested) {\n      return checkIsNameRequiredInSchema({\n        name: nestedNames,\n        schema: itemSchema,\n        values: nestedValues,\n      });\n    }\n\n    return checkIsSchemaRequired(itemSchema);\n  }\n\n  if (isUnionSchema(schema)) {\n    const { options } = schema;\n\n    return options.every((optionSchema) => {\n      return checkIsNameRequiredInSchema({ name, schema: optionSchema, values });\n    });\n  }\n\n  if (isDiscriminatedUnionSchema(schema)) {\n    const { optionsMap, discriminator } = schema;\n\n    const discriminatorValue = get(values, discriminator);\n\n    const matchingSchema = optionsMap.get(discriminatorValue);\n\n    if (!matchingSchema) return false;\n\n    return checkIsNameRequiredInSchema({\n      name,\n      schema: matchingSchema,\n      values,\n    });\n  }\n\n  return false;\n};\n\nexport type UseIsRequiredInputParam = Partial<UseControllerProps>;\n\nexport const useIsRequiredInput = (param: UseIsRequiredInputParam): boolean => {\n  const { name, rules } = param;\n\n  const values = useWatch();\n  const schema = useSchemaContext();\n\n  if (!name) return false;\n\n  if (schema) {\n    return checkIsNameRequiredInSchema({ name, schema, values });\n  }\n\n  const isInputHasRequiredRule = Boolean(rules?.required);\n\n  return isInputHasRequiredRule;\n};\n"],"names":["InputLabel","inputLabelClasses","useTranslation","styled","PREFIX","LabeledClasses","label","StyledLabeled","name","theme","display","position","typography","body2","color","palette","text","primary","margin","marginBottom","transform","error","main","Labeled","props","children","className","sx","rest","t","createContext","useContext","SchemaContext","SchemaContextProvider","Provider","useSchemaContext","useId","useMemo","FormControl","FormHelperText","InputAdornment","useTranslate","InputTemplate","placeholder","id","fullWidth","helperText","formControlProps","startIcon","value","withoutHelperTextSpace","translate","basePath","ownId","resultId","getAbornmentColor","Array","isArray","length","customPlaceholder","lowercaseLabel","toLowerCase","htmlFor","width","hiddenLabel","String","startAdornment","Box","useErrorHandler","FormProvider","HookFormProvider","getMessagesFromError","setSubmissionErrors","FormView","schema","formMethods","onSubmit","setError","setFocus","handleQueryErrors","handleSubmit","values","errors","path","Object","keys","component","noValidate","z","zodResponseErrorSchema","object","response","data","message","string","optional","record","array","parsedResponseError","safeParse","defaultMessage","success","errorMessage","isError","Error","forEach","key","type","join","formatDate","getFormattedDateRange","params","startDate","endDate","separator","dateDisplayFormat","formattedStartDate","formattedEndDate","useCallback","useSnackbar","get","HTTP_NOT_FOUND_STATUS","enqueueSnackbar","options","status","showErrors","showMessage","shouldShowErrors","shouldShowMessage","messagesArray","flat","slice","variant","zodResolver","useForm","useHookForm","validationSchema","originalProps","form","resolver","undefined","isObjectSchema","shape","isArraySchema","isTupleSchema","items","isUnionSchema","optionsMap","isDiscriminatedUnionSchema","Map","useWatch","checkIsSchemaRequired","isOptional","canBeEmptyString","checkIsNameRequiredInSchema","mainName","splittedNestedNames","split","nestedNames","isNameNested","nestedValues","nestedSchema","numericMainName","Number","isMainNameValidIndex","isInteger","element","elementSchema","itemSchema","every","optionSchema","discriminator","discriminatorValue","matchingSchema","useIsRequiredInput","param","rules","isInputHasRequiredRule","Boolean","required"],"sourceRoot":""}