{"version":3,"file":"119.js","mappings":"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","sources":["webpack:///./src/components/forms/Form/Form.tsx","webpack:///./src/components/forms/Form/index.ts","webpack:///./src/components/inputs/AutocompleteInput/AutocompleteInput.tsx","webpack:///./src/components/inputs/AutocompleteInput/helpers/getSelectedChoices/getSelectedChoices.ts","webpack:///./src/components/inputs/AutocompleteInput/helpers/getSelectedChoices/index.ts","webpack:///./src/components/inputs/AutocompleteInput/hooks/useSelectedChoices/useSelectedChoices.ts","webpack:///./src/components/inputs/AutocompleteInput/hooks/useSelectedChoices/index.ts","webpack:///./src/components/inputs/AutocompleteInput/index.ts","webpack:///./src/components/inputs/CityInput/CityInput.tsx","webpack:///./src/components/inputs/CityInput/index.ts","webpack:///./src/components/inputs/ReferenceInput/ReferenceInput.tsx","webpack:///./src/components/inputs/ReferenceInput/index.ts","webpack:///./src/components/inputs/ReferenceInput/useSearchChoicesQuery.ts","webpack:///./src/components/inputs/ReferenceInput/useSelectedChoicesQuery.ts","webpack:///./src/components/inputs/SearchDateRangePickerInput/SearchDateRangePickerInput.tsx","webpack:///./src/components/inputs/SearchDateRangePickerInput/index.ts","webpack:///./src/hooks/queries/useGetPopularCities.ts"],"sourcesContent":["import { FC } from 'react';\n\nimport { useForm, UseFormProps } from 'hooks/useForm';\nimport { FormView, FormViewOwnProps } from 'views/FormView';\n\nexport type FormProps = UseFormProps & FormViewOwnProps;\n\nexport const Form: FC<FormProps> = (props) => {\n  const { children, onSubmit, sx, className, id, ...formProps } = props;\n\n  const form = useForm({ ...formProps });\n\n  return (\n    <FormView {...form} id={id} sx={sx} className={className} onSubmit={onSubmit}>\n      {children}\n    </FormView>\n  );\n};\n","export * from './Form';\n","import {\n  ComponentProps,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\n\nimport { createFilterOptions } from '@mui/material';\nimport { ChoicesContextChoiceType, useChoicesContext } from '@packages/providers';\nimport { ListFilterType, WithRootProps } from '@packages/types';\nimport { SEARCH_STRING_FILTER_SOURCE } from 'application/constants';\nimport { useIsRequiredInput } from 'hooks/useIsRequiredInput';\nimport { debounce, get, isEmpty } from 'lodash';\nimport { useController, UseControllerProps } from 'react-hook-form';\nimport { AutocompleteInputView, AutocompleteInputViewProps } from 'views/AutocompleteInputView';\n\nimport { useSelectedChoice } from './hooks/useSelectedChoices';\n\nexport type AutocompleteInputProps<\n  Choice extends ChoicesContextChoiceType = ChoicesContextChoiceType,\n  Multiple extends boolean | undefined = undefined,\n  DisableClearable extends boolean | undefined = undefined,\n> = WithRootProps<\n  Omit<\n    AutocompleteInputViewProps<Choice, Multiple, DisableClearable, false>,\n    'value' | 'inputValue' | 'defaultValue' | 'required' | 'onChange' | 'onInputChange' | 'freeSolo'\n  >,\n  {\n    name?: string;\n    controllerProps?: Partial<Omit<UseControllerProps, 'name'>>;\n    optionText?: string;\n    optionValue?: string;\n    options?: Choice[];\n    startIcon?: ReactNode;\n    debounce?: number;\n    onInputChange?: (value: string) => void;\n    filterToQuery?: (searchString: string) => ListFilterType;\n  }\n>;\n\nconst defaultFilterToQuery = (searchString: string) => ({\n  [SEARCH_STRING_FILTER_SOURCE]: searchString,\n});\n\nexport function AutocompleteInput<\n  Choice extends ChoicesContextChoiceType,\n  Multiple extends boolean | undefined = undefined,\n  DisableClearable extends boolean | undefined = undefined,\n>(props: AutocompleteInputProps<Choice, Multiple, DisableClearable>) {\n  const {\n    name: nameProp,\n    optionText = 'title',\n    optionValue = 'id',\n    options,\n    controllerProps,\n    helperText,\n    loading,\n    error,\n    debounce: debounceTime = 500,\n    onInputChange: onInputChangeProp,\n    filterOptions: filterOptionsProp,\n    filterToQuery = defaultFilterToQuery,\n    ...rest\n  } = props;\n\n  const { multiple, disableClearable } = rest;\n\n  const { name, allChoices, isFetching, isFromReference, filter, setFilter } = useChoicesContext({\n    name: nameProp,\n    choices: options,\n    isFetching: loading,\n  });\n\n  const finalControllerProps = { name, ...controllerProps };\n\n  const {\n    field: { ref, value, onChange, onBlur },\n  } = useController(finalControllerProps);\n\n  const isRequired = useIsRequiredInput(finalControllerProps);\n\n  const [typedText, setTypedText] = useState<string>('');\n  const [searchString, setSearchString] = useState<string>(typedText);\n\n  const prevSearchString = useRef<string>();\n\n  const selectedChoice = useSelectedChoice<Choice, Multiple, DisableClearable>({\n    choices: allChoices,\n    value,\n    optionValue,\n    multiple,\n    disableClearable,\n  });\n\n  const debouncedSetSearchString = useMemo(() => {\n    return debounce((newString) => {\n      setSearchString(newString);\n    }, debounceTime);\n  }, [debounceTime]);\n\n  useEffect(() => {\n    debouncedSetSearchString.cancel();\n\n    /**\n     * We reset search string if some choice\n     * is selected to show user all the available\n     * choices again. Otherwise, he would need to\n     * clear the input first\n     */\n    if (!isEmpty(selectedChoice)) {\n      setSearchString('');\n      return;\n    }\n\n    debouncedSetSearchString(typedText);\n  }, [selectedChoice, typedText, debouncedSetSearchString]);\n\n  useEffect(() => {\n    if (prevSearchString.current !== searchString) {\n      prevSearchString.current = searchString;\n      setFilter({ ...filter, ...filterToQuery(searchString) });\n    }\n  }, [filter, searchString, setFilter, filterToQuery]);\n\n  useEffect(() => {\n    onInputChangeProp?.(searchString);\n  }, [searchString, onInputChangeProp]);\n\n  const handleInputValueChange = useCallback<\n    NonNullable<ComponentProps<typeof AutocompleteInputView>['onInputChange']>\n  >((_, newValue) => {\n    setTypedText(newValue);\n  }, []);\n\n  const handleChange = useCallback<\n    NonNullable<ComponentProps<typeof AutocompleteInputView>['onChange']>\n  >(\n    (_event, newValue) => {\n      let fieldValue: unknown = get(newValue, optionValue, '');\n\n      if (multiple) {\n        const values = Array.isArray(newValue) ? newValue : [];\n        fieldValue = values.map((item) => get(item, optionValue)).filter((item) => !!item);\n      }\n\n      onChange(fieldValue);\n    },\n    [multiple, optionValue, onChange],\n  );\n\n  const isOptionEqualToValue = useCallback<\n    NonNullable<AutocompleteInputProps<Choice, Multiple, DisableClearable>['isOptionEqualToValue']>\n  >(\n    (option, value) => {\n      return get(option, optionValue) === get(value, optionValue);\n    },\n    [optionValue],\n  );\n\n  const getOptionLabel = useCallback<\n    NonNullable<AutocompleteInputProps<Choice, Multiple, DisableClearable>['getOptionLabel']>\n  >(\n    (option) => {\n      return String(get(option, optionText, ''));\n    },\n    [optionText],\n  );\n\n  const filterOptions = useCallback<\n    NonNullable<AutocompleteInputProps<Choice, Multiple, DisableClearable>['filterOptions']>\n  >(\n    (options, state) => {\n      if (filterOptionsProp) {\n        return filterOptionsProp(options, state);\n      }\n\n      if (isFromReference) return options;\n\n      const defaultFilterOptions = createFilterOptions<Choice>();\n      return defaultFilterOptions(options, state);\n    },\n    [filterOptionsProp, isFromReference],\n  );\n\n  return (\n    <AutocompleteInputView<Choice, Multiple, DisableClearable, false>\n      ref={ref}\n      value={selectedChoice}\n      inputValue={typedText}\n      options={allChoices}\n      isOptionEqualToValue={isOptionEqualToValue}\n      getOptionLabel={getOptionLabel}\n      filterOptions={filterOptions}\n      onInputChange={handleInputValueChange}\n      onChange={handleChange}\n      onBlur={onBlur}\n      loading={isFetching}\n      required={isRequired}\n      {...rest}\n    />\n  );\n}\n\nexport default AutocompleteInput;\n","import { AutocompleteValue } from '@mui/material';\nimport { ChoicesContextChoiceType } from '@packages/providers';\nimport { get } from 'lodash';\n\nexport interface GetSelectedChoicesParams<\n  Choice extends ChoicesContextChoiceType,\n  Multiple extends boolean | undefined,\n  DisableClearable extends boolean | undefined,\n> {\n  choices: Array<Choice>;\n  value: unknown;\n  optionValue: string;\n  multiple?: Multiple;\n  disableClearable?: DisableClearable;\n}\n\nexport type GetSelectedChoicesReturn<\n  Option,\n  Multiple extends boolean | undefined,\n  DisableClearable extends boolean | undefined,\n> = AutocompleteValue<Option, Multiple, DisableClearable, false>;\n\nexport const getSelectedChoices = <\n  Choice extends ChoicesContextChoiceType,\n  Multiple extends boolean | undefined,\n  DisableClearable extends boolean | undefined,\n>(\n  params: GetSelectedChoicesParams<Choice, Multiple, DisableClearable>,\n): GetSelectedChoicesReturn<Choice, Multiple, DisableClearable> => {\n  const { choices, value, optionValue, multiple, disableClearable } = params;\n\n  if (multiple) {\n    const values = Array.isArray(value) ? value : [];\n    return values\n      .map((item) => choices.find((choice) => item === get(choice, optionValue)))\n      .filter((item) => item !== undefined) as GetSelectedChoicesReturn<\n      Choice,\n      Multiple,\n      DisableClearable\n    >;\n  }\n\n  const choice = choices.find((choice) => get(choice, optionValue) === value);\n\n  if (disableClearable) {\n    return choice as GetSelectedChoicesReturn<Choice, Multiple, DisableClearable>;\n  }\n\n  return (choice ?? null) as GetSelectedChoicesReturn<Choice, Multiple, DisableClearable>;\n};\n","export * from './getSelectedChoices';\n","import { useEffect, useRef, useState } from 'react';\n\nimport { ChoicesContextChoiceType } from '@packages/providers';\nimport { isEqual } from 'lodash';\n\nimport {\n  getSelectedChoices,\n  GetSelectedChoicesParams,\n  GetSelectedChoicesReturn,\n} from '../../helpers/getSelectedChoices';\n\ntype UseSelectedChoicesParams<\n  Choice extends ChoicesContextChoiceType,\n  Multiple extends boolean | undefined,\n  DisableClearable extends boolean | undefined,\n> = GetSelectedChoicesParams<Choice, Multiple, DisableClearable>;\n\ntype UseSelectedChoicesReturn<\n  Choice extends ChoicesContextChoiceType,\n  Multiple extends boolean | undefined,\n  DisableClearable extends boolean | undefined,\n> = GetSelectedChoicesReturn<Choice, Multiple, DisableClearable>;\n\nexport const useSelectedChoice = <\n  Choice extends ChoicesContextChoiceType,\n  Multiple extends boolean | undefined,\n  DisableClearable extends boolean | undefined,\n>(\n  params: UseSelectedChoicesParams<Choice, Multiple, DisableClearable>,\n): UseSelectedChoicesReturn<Choice, Multiple, DisableClearable> => {\n  const selectedChoicesRef = useRef(getSelectedChoices(params));\n\n  const [selectedChoices, setSelectedChoices] = useState<\n    UseSelectedChoicesReturn<Choice, Multiple, DisableClearable>\n  >(() => getSelectedChoices(params));\n\n  // As the selected choices are objects, we want to ensure we pass the same\n  // reference to the Autocomplete as it would reset its filter value otherwise.\n  useEffect(() => {\n    const newSelectedItems = getSelectedChoices(params);\n\n    if (!isEqual(selectedChoicesRef.current, newSelectedItems)) {\n      selectedChoicesRef.current = newSelectedItems;\n      setSelectedChoices(newSelectedItems);\n    }\n  }, [params]);\n\n  return selectedChoices as GetSelectedChoicesReturn<Choice, Multiple, DisableClearable>;\n};\n","export * from './useSelectedChoices';\n","export * from './AutocompleteInput';\n","import { FC, useCallback } from 'react';\n\nimport { Box, Typography } from '@mui/material';\nimport { CityTypes } from '@packages/providers';\nimport { CITY_SOURCE } from 'application/constants';\nimport { CITIES_RESOURCE } from 'application/resources';\nimport { IcoMoon } from 'custom/IcoMoon';\nimport { useGetPopularCities } from 'hooks/queries/useGetPopularCities';\nimport { useTranslate } from 'hooks/useTranslate';\nimport { AutocompleteInput, AutocompleteInputProps } from 'inputs/AutocompleteInput';\nimport { ReferenceInput } from 'inputs/ReferenceInput';\nimport get from 'lodash/get';\n\ntype CityRecord = CityTypes['index'][number] & {\n  /**\n   * Since BE doesn't have popular attribute in the city record yet, we add it manually here\n   */\n  popular?: boolean;\n};\n\nconst optionValue = 'slug';\nconst optionText = 'title';\n\nconst sort = { field: 'title', order: 'ASC' } as const;\n\nexport type CityAutocompleteInputProps = Partial<AutocompleteInputProps> & {\n  name: string;\n  optionPopular?: string;\n};\n\nexport const CityAutocompleteInput: FC<CityAutocompleteInputProps> = (props) => {\n  const { optionPopular = 'popular', ...rest } = props;\n\n  const translate = useTranslate();\n\n  const groupBy = useCallback<NonNullable<AutocompleteInputProps['groupBy']>>(\n    (option) => {\n      const isPopularCityOption = !!get(option, optionPopular);\n\n      if (isPopularCityOption) {\n        return translate.root('custom.popular_destinations');\n      }\n      return '';\n    },\n    [translate, optionPopular],\n  );\n\n  const renderOption = useCallback<NonNullable<AutocompleteInputProps['renderOption']>>(\n    (liProps, option) => {\n      const isPopularCityOption = !!get(option, optionPopular);\n      const title = String(get(option, 'title'));\n      const subtitle = String(get(option, 'country.title'));\n\n      return (\n        <Box component=\"li\" {...liProps}>\n          {isPopularCityOption && <IcoMoon icon=\"pin\" sx={{ mr: 1 }} />}\n          <Box>\n            <Typography variant=\"body2\">{title}</Typography>\n            <Typography variant=\"small1\">{subtitle}</Typography>\n          </Box>\n        </Box>\n      );\n    },\n    [optionPopular],\n  );\n\n  return (\n    <AutocompleteInput\n      {...rest}\n      optionText={optionText}\n      optionValue={optionValue}\n      placeholder={translate.root('pages.search.placeholder.location')}\n      startIcon={<IcoMoon icon=\"pin\" />}\n      groupBy={groupBy}\n      renderOption={renderOption}\n    />\n  );\n};\n\n/**\n * When BE will support popular attribute in the cities response, and we will not have\n * only popular cities, we need to remove this component,\n * and use only `NotOnlyPopularCityInput` (renamed to CityInput)\n */\nconst OnlyPopularCityInput: FC<CityAutocompleteInputProps> = (props) => {\n  const { data: popularCitiesData = [], isFetching: arePopularCitiesFetching } =\n    useGetPopularCities();\n\n  const popularCitiesChoices: CityRecord[] = popularCitiesData.map((item) => {\n    return { ...item, popular: true };\n  });\n\n  return (\n    <CityAutocompleteInput\n      {...props}\n      options={popularCitiesChoices}\n      loading={arePopularCitiesFetching}\n    />\n  );\n};\n\nconst NotOnlyPopularCityInput: FC<CityAutocompleteInputProps> = (props) => {\n  return (\n    <ReferenceInput<CityRecord>\n      name={CITY_SOURCE}\n      resource={CITIES_RESOURCE}\n      optionValue={optionValue}\n      sort={sort}\n      selectedChoicesFilterName=\"slugs\"\n    >\n      <CityAutocompleteInput {...props} />\n    </ReferenceInput>\n  );\n};\n\nexport interface CityInputProps extends CityAutocompleteInputProps {\n  onlyPopular?: boolean;\n}\n\nexport const CityInput: FC<CityInputProps> = (props) => {\n  const { onlyPopular, ...rest } = props;\n\n  const Component = onlyPopular ? OnlyPopularCityInput : NotOnlyPopularCityInput;\n\n  return <Component {...rest} />;\n};\n\nexport default CityInput;\n","export * from './CityInput';\n","import { ReactNode, useMemo, useState } from 'react';\n\nimport {\n  ChoicesContextChoiceType,\n  choicesContextDefaultValue,\n  ChoicesContextProvider,\n  ChoicesContextValueType,\n} from '@packages/providers';\nimport { ListParams } from '@packages/types';\nimport { differenceBy } from 'lodash';\nimport { useWatch } from 'react-hook-form';\n\nimport { useSearchChoicesQuery, UseSearchChoicesQueryParams } from './useSearchChoicesQuery';\nimport { useSelectedChoicesQuery } from './useSelectedChoicesQuery';\n\ninterface ReferenceInputProps<T extends ChoicesContextChoiceType> extends Partial<ListParams> {\n  name: string;\n  resource: string;\n  optionValue?: string;\n  selectedChoicesFilterName?: string;\n  queryOptions?: UseSearchChoicesQueryParams<T>['options'];\n  children: ReactNode;\n}\n\nexport const ReferenceInput = <T extends ChoicesContextChoiceType = ChoicesContextChoiceType>(\n  props: ReferenceInputProps<T>,\n) => {\n  const {\n    name,\n    resource,\n    optionValue = 'id',\n    selectedChoicesFilterName = 'ids',\n    filter,\n    page,\n    perPage,\n    sort,\n    queryOptions,\n    children,\n  } = props;\n\n  const [listParams, setListParams] = useState<Partial<ListParams>>(() => {\n    return {\n      filter: filter ?? choicesContextDefaultValue.filter,\n      sort: sort ?? choicesContextDefaultValue.sort,\n      page: page ?? choicesContextDefaultValue.page,\n      perPage: perPage ?? choicesContextDefaultValue.perPage,\n    };\n  });\n\n  const value = useWatch({ name });\n  const ids = value ? (Array.isArray(value) ? value : [value]) : [];\n\n  const {\n    data: choices = [],\n    error: choicesError,\n    isFetching: isChoicesFetching,\n  } = useSearchChoicesQuery<T>({\n    resource,\n    listParams,\n    options: queryOptions,\n  });\n\n  const {\n    data: selectedChoices = [],\n    error: selectedChoicesError,\n    isFetching: isSelectedChoicesFetching,\n  } = useSelectedChoicesQuery<T>({\n    resource,\n    ids,\n    filterName: selectedChoicesFilterName,\n    options: {\n      enabled: !!value,\n    },\n  });\n\n  const choicesContextValue = useMemo<ChoicesContextValueType<T>>(() => {\n    const availableChoices = differenceBy(choices, selectedChoices, optionValue);\n\n    return {\n      name,\n      allChoices: [...selectedChoices, ...availableChoices],\n      availableChoices,\n      selectedChoices,\n      error: selectedChoicesError || choicesError,\n      isFetching: isSelectedChoicesFetching || isChoicesFetching,\n      isFromReference: true,\n      filter: listParams.filter,\n      page: listParams.page,\n      perPage: listParams.perPage,\n      sort: listParams.sort,\n      setFilter: (filter) => setListParams((prev) => ({ ...prev, filter })),\n      setPage: (page) => setListParams((prev) => ({ ...prev, page })),\n      setPerPage: (perPage) => setListParams((prev) => ({ ...prev, perPage })),\n      setSort: (sort) => setListParams((prev) => ({ ...prev, sort })),\n    };\n  }, [\n    name,\n    choices,\n    choicesError,\n    isChoicesFetching,\n    isSelectedChoicesFetching,\n    listParams,\n    optionValue,\n    selectedChoices,\n    selectedChoicesError,\n  ]);\n\n  return <ChoicesContextProvider value={choicesContextValue}>{children}</ChoicesContextProvider>;\n};\n","export * from './ReferenceInput';\n","import { ChoicesContextChoiceType, fetchClient } from '@packages/providers';\nimport { ListParams } from '@packages/types';\nimport { useQuery, UseQueryOptions } from '@tanstack/react-query';\n\nconst getQueryKey = (params: UseSearchChoicesQueryRequestParams) => {\n  const { resource, listParams } = params;\n  return [resource, listParams] as const;\n};\n\ntype UseSearchChoicesQueryKey = ReturnType<typeof getQueryKey>;\n\ninterface UseSearchChoicesQueryRequestParams {\n  resource: string;\n  listParams: Partial<ListParams>;\n}\n\nexport interface UseSearchChoicesQueryParams<T extends ChoicesContextChoiceType>\n  extends UseSearchChoicesQueryRequestParams {\n  options?: Omit<\n    UseQueryOptions<T[], unknown, T[], UseSearchChoicesQueryKey>,\n    'queryKey' | 'queryFn'\n  >;\n}\n\nexport const useSearchChoicesQuery = <T extends ChoicesContextChoiceType>(\n  params: UseSearchChoicesQueryParams<T>,\n) => {\n  const { resource, listParams, options = {} } = params;\n\n  return useQuery<T[], unknown, T[], UseSearchChoicesQueryKey>({\n    queryKey: getQueryKey({ resource, listParams }),\n    queryFn: async () => {\n      const {\n        data: { data },\n      } = await fetchClient.get({ pathname: resource, ...listParams });\n\n      const result = Array.isArray(data) ? data : [];\n      return result as T[];\n    },\n    ...options,\n  });\n};\n","import { ChoicesContextChoiceType, fetchClient } from '@packages/providers';\nimport { Identifier } from '@packages/types';\nimport { useQuery, UseQueryOptions } from '@tanstack/react-query';\n\nconst getQueryKey = (params: UseSelectedChoicesQueryRequestParams) => {\n  const { resource, ids, filterName } = params;\n  return [resource, filterName, ids] as const;\n};\n\ntype UseSelectedChoicesQueryKey = ReturnType<typeof getQueryKey>;\n\ninterface UseSelectedChoicesQueryRequestParams {\n  resource: string;\n  ids: Identifier[];\n  filterName: string;\n}\n\ninterface UseSelectedChoicesQueryParams<T extends ChoicesContextChoiceType>\n  extends UseSelectedChoicesQueryRequestParams {\n  options?: Omit<\n    UseQueryOptions<T[], unknown, T[], UseSelectedChoicesQueryKey>,\n    'queryKey' | 'queryFn'\n  >;\n}\n\nexport const useSelectedChoicesQuery = <T extends ChoicesContextChoiceType>(\n  params: UseSelectedChoicesQueryParams<T>,\n) => {\n  const { resource, ids, filterName, options = {} } = params;\n\n  return useQuery<T[], unknown, T[], UseSelectedChoicesQueryKey>({\n    queryKey: getQueryKey({ ids, filterName, resource }),\n    queryFn: async () => {\n      const {\n        data: { data },\n      } = await fetchClient.get({ pathname: resource, filter: { [filterName]: ids } });\n\n      const result = Array.isArray(data) ? data : [];\n      return result as T[];\n    },\n    ...options,\n  });\n};\n","import { FC, useCallback, useState } from 'react';\n\nimport { getParsedToDateValue } from '@packages/helpers';\nimport { getMinMaxStayDatesRestrictions } from 'helpers/getMinMaxStayDatesRestrictions';\nimport { DateRangePickerInputProps, DEFAULT_SAVE_FORMAT } from 'inputs/DateRangePickerInput';\nimport { useDateRangePickerInput } from 'inputs/DateRangePickerInput/hooks/useDateRangePickerInput';\nimport DateRangePickerInputView, {\n  DateRangePickerInputViewProps,\n} from 'views/DateRangePickerInputView';\n\nexport interface SearchDateRangePickerInputProps extends DateRangePickerInputProps {\n  minStay?: number;\n  maxStay?: number;\n}\n\nexport const SearchDateRangePickerInput: FC<SearchDateRangePickerInputProps> = (props) => {\n  const {\n    saveFormat = DEFAULT_SAVE_FORMAT,\n    minDate: defaultMinDate,\n    maxDate: defaultMaxDate,\n    minStay = 1,\n    maxStay = Infinity,\n    ...rest\n  } = props;\n\n  const { value, error, required, onAccept, onBlur } = useDateRangePickerInput({\n    ...rest,\n    saveFormat,\n  });\n\n  const [selectedRange, setSelectedRange] = useState<[Date | undefined, Date | undefined]>([\n    getParsedToDateValue({ value: value.startDate, format: saveFormat }),\n    getParsedToDateValue({ value: value.endDate, format: saveFormat }),\n  ]);\n\n  const handleValueChange = useCallback<NonNullable<DateRangePickerInputViewProps['onChange']>>(\n    ({ startDate, endDate }) => {\n      setSelectedRange([startDate, endDate]);\n    },\n    [],\n  );\n\n  const { minDate, maxDate } = getMinMaxStayDatesRestrictions({\n    selectedRange,\n    minStay,\n    maxStay,\n    minDate: defaultMinDate,\n    maxDate: defaultMaxDate,\n  });\n\n  return (\n    <DateRangePickerInputView\n      {...rest}\n      minDate={minDate}\n      maxDate={maxDate}\n      value={value}\n      error={!!error}\n      helperText={error}\n      required={required}\n      onAccept={onAccept}\n      onChange={handleValueChange}\n      slotProps={{\n        field: { slotProps: { field: { onBlur } } },\n      }}\n    />\n  );\n};\n","export * from './SearchDateRangePickerInput';\n","import { CityTypes, fetchClient, zodCitySchemas } from '@packages/providers';\nimport { QueryClient, QueryFunction, useQuery } from '@tanstack/react-query';\nimport { POPULAR_CITIES } from 'application/resources';\nimport { GetServerSidePropsContext } from 'next';\n\nconst queryKey = [POPULAR_CITIES] as const;\n\ntype PopularCitiesQueryKey = typeof queryKey;\n\nconst queryFn: QueryFunction<CityTypes['popular'], PopularCitiesQueryKey> = async (params) => {\n  const { meta } = params;\n  const context = meta?.context as GetServerSidePropsContext;\n  const {\n    data: { data },\n  } = await fetchClient.get({ pathname: POPULAR_CITIES }, { context });\n\n  return zodCitySchemas.popular.parse(data);\n};\n\nexport type UseGetPopularCitiesParams = {\n  enabled?: boolean;\n};\n\nexport const prefetchPopularCities = (\n  queryClient: QueryClient,\n  context: GetServerSidePropsContext,\n) => {\n  return queryClient.prefetchQuery({\n    queryKey,\n    queryFn,\n    meta: { context },\n  });\n};\n\nexport const useGetPopularCities = (params: UseGetPopularCitiesParams = {}) => {\n  const { enabled } = params;\n  return useQuery({\n    queryKey,\n    queryFn: queryFn,\n    enabled,\n    refetchOnMount: false,\n  });\n};\n\nexport default useGetPopularCities;\n"],"names":["useForm","FormView","Form","props","children","onSubmit","sx","className","id","formProps","form","useCallback","useEffect","useMemo","useRef","useState","createFilterOptions","useChoicesContext","SEARCH_STRING_FILTER_SOURCE","useIsRequiredInput","debounce","get","isEmpty","useController","AutocompleteInputView","useSelectedChoice","defaultFilterToQuery","searchString","AutocompleteInput","name","nameProp","optionText","optionValue","options","controllerProps","helperText","loading","error","debounceTime","onInputChange","onInputChangeProp","filterOptions","filterOptionsProp","filterToQuery","rest","multiple","disableClearable","allChoices","isFetching","isFromReference","filter","setFilter","choices","finalControllerProps","field","ref","value","onChange","onBlur","isRequired","typedText","setTypedText","setSearchString","prevSearchString","selectedChoice","debouncedSetSearchString","newString","cancel","current","handleInputValueChange","_","newValue","handleChange","_event","fieldValue","values","Array","isArray","map","item","isOptionEqualToValue","option","getOptionLabel","String","state","defaultFilterOptions","inputValue","required","getSelectedChoices","params","find","choice","undefined","isEqual","selectedChoicesRef","selectedChoices","setSelectedChoices","newSelectedItems","Box","Typography","CITY_SOURCE","CITIES_RESOURCE","IcoMoon","useGetPopularCities","useTranslate","ReferenceInput","sort","order","CityAutocompleteInput","optionPopular","translate","groupBy","isPopularCityOption","root","renderOption","liProps","title","subtitle","component","icon","mr","variant","placeholder","startIcon","OnlyPopularCityInput","data","popularCitiesData","arePopularCitiesFetching","popularCitiesChoices","popular","NotOnlyPopularCityInput","resource","selectedChoicesFilterName","CityInput","onlyPopular","Component","choicesContextDefaultValue","ChoicesContextProvider","differenceBy","useWatch","useSearchChoicesQuery","useSelectedChoicesQuery","page","perPage","queryOptions","listParams","setListParams","ids","choicesError","isChoicesFetching","selectedChoicesError","isSelectedChoicesFetching","filterName","enabled","choicesContextValue","availableChoices","prev","setPage","setPerPage","setSort","fetchClient","useQuery","getQueryKey","queryKey","queryFn","pathname","result","getParsedToDateValue","getMinMaxStayDatesRestrictions","DEFAULT_SAVE_FORMAT","useDateRangePickerInput","DateRangePickerInputView","SearchDateRangePickerInput","saveFormat","minDate","defaultMinDate","maxDate","defaultMaxDate","minStay","maxStay","Infinity","onAccept","selectedRange","setSelectedRange","startDate","format","endDate","handleValueChange","slotProps","zodCitySchemas","POPULAR_CITIES","meta","context","parse","prefetchPopularCities","queryClient","prefetchQuery","refetchOnMount"],"sourceRoot":""}