{"version":3,"file":"755.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAEyC;AACA;AAE6B;AACP;AAO/D,MAAMI,kBAA4C,CAACC,QAAU;IAC3D,MAAM,EAAEC,MAAK,EAAEC,QAAO,EAAE,GAAGC,qBAAqB,GAAGH;IAEnD,MAAMI,QAAQT,uDAAQA;IAEtB,qBACE,mDAACE,qFAAiBA;QAChBQ,qBACE,mDAACP,4DAAUA;YAACQ,SAAQ;YAAa,GAAGH,mBAAmB;sBACpDF;;kBAIJC,wBACC,mDAACN,4DAAOA;YAACW,MAAK;YAAQC,OAAOJ,MAAMK,OAAO,CAACC,OAAO,CAACC,IAAI;2BAEvD,mDAACf,4DAAOA;YAACW,MAAK;UACf;;AAGP;AAEA,iEAAeR,eAAeA,EAAC;;;;;;;;;;;;;;;;;ACnCM;;;;;;;;;;;;;;;;;;;ACAiD;AAErC;AACW;AAG5D,MAAMiB,kBAAkB,OAAOC,KAAkD;IAC/E,MAAMC,WAAWH,mFAAgBA,CAACE;IAElC,MAAM,EACJE,MAAM,EAAEA,KAAI,EAAE,GACf,GAAG,MAAMP,8EAAe,CAAC;QACxBS,UAAUH;IACZ;IAEA,OAAOL,yGAAwC,CAACM;AAClD;AAEO,MAAMI,qBAAqB,CAACN,KAAmB;IACpD,OAAOH,+DAAQA,CAAC;QACdU,UAAU;YAAC;YAAiBP;SAAG;QAC/BQ,SAAS,IAAMT,gBAAgBC;QAC/BS,gBAAgB,KAAK;QACrBC,SAAS,CAAC,CAACV;IACb;AACF,EAAE","sources":["webpack:///./src/components/views/RequirementView/RequirementView.tsx","webpack:///./src/hooks/queries/useGetFilterLabels/index.ts","webpack:///./src/hooks/queries/useGetFilterLabels/useGetFilterLabels.ts"],"sourcesContent":["import { FC } from 'react';\n\nimport { useTheme } from '@mui/material';\nimport { IcoMoon } from 'custom/IcoMoon';\n\nimport { WithTitleTemplate } from '../../templates/WithTitleTemplate';\nimport { Typography, TypographyProps } from '../../Typography';\n\nexport interface RequirementViewProps extends TypographyProps {\n  allowed?: boolean; // false by default\n  label: string;\n}\n\nconst RequirementView: FC<RequirementViewProps> = (props) => {\n  const { label, allowed, ...restTypographyProps } = props;\n\n  const theme = useTheme();\n\n  return (\n    <WithTitleTemplate\n      title={\n        <Typography variant=\"subtitle1\" {...restTypographyProps}>\n          {label}\n        </Typography>\n      }\n    >\n      {allowed ? (\n        <IcoMoon icon=\"check\" color={theme.palette.success.main} />\n      ) : (\n        <IcoMoon icon=\"ban\" />\n      )}\n    </WithTitleTemplate>\n  );\n};\n\nexport default RequirementView;\n","export * from './useGetFilterLabels';\n","import { fetchClient, zodFilterLabelsResourceIndexSchema } from '@packages/providers';\nimport { Identifier } from '@packages/types';\nimport { useQuery } from '@tanstack/react-query';\nimport { getLabelResource } from 'helpers/getLabelResource';\nimport { FilterLabelsRecord } from 'types/index';\n\nconst getFilterLabels = async (id: Identifier): Promise<FilterLabelsRecord[]> => {\n  const endpoint = getLabelResource(id);\n\n  const {\n    data: { data },\n  } = await fetchClient.get({\n    pathname: endpoint,\n  });\n\n  return zodFilterLabelsResourceIndexSchema.parse(data);\n};\n\nexport const useGetFilterLabels = (id: Identifier) => {\n  return useQuery({\n    queryKey: ['filter-labels', id],\n    queryFn: () => getFilterLabels(id),\n    refetchOnMount: false,\n    enabled: !!id,\n  });\n};\n"],"names":["useTheme","IcoMoon","WithTitleTemplate","Typography","RequirementView","props","label","allowed","restTypographyProps","theme","title","variant","icon","color","palette","success","main","fetchClient","zodFilterLabelsResourceIndexSchema","useQuery","getLabelResource","getFilterLabels","id","endpoint","data","get","pathname","parse","useGetFilterLabels","queryKey","queryFn","refetchOnMount","enabled"],"sourceRoot":""}