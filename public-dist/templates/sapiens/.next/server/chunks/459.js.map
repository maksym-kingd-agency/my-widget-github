{"version":3,"file":"459.js","mappings":"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","sources":["webpack:///./src/hooks/queries/useMutationReservation/constants.ts","webpack:///./src/hooks/queries/useMutationReservation/index.ts","webpack:///./src/hooks/queries/useMutationReservation/schemas.ts","webpack:///./src/hooks/queries/useMutationReservation/useMutationReservation.ts"],"sourcesContent":["export const GUEST_RESERVATION_SOURCES = {\n  first_name: 'first_name',\n  last_name: 'last_name',\n  email: 'email',\n} as const;\n\nexport const PAYER_RESERVATION_SOURCES = {\n  first_name: 'first_name',\n  last_name: 'last_name',\n  email: 'email',\n} as const;\n\nexport const CHECKOUT_FORM_SOURCES = {\n  quote: 'quote',\n  driver_payment_method_id: 'driver_payment_method_id',\n  rate_plan_id: 'rate_plan_id',\n  guest: 'guest',\n  payer: 'payer',\n  cc_token: 'cc_token',\n  is_apply_for_billing: 'is_apply_for_billing',\n} as const;\n\nexport const RESERVATION_RESPONSE_SOURCES = {\n  checkin_at: 'checkin_at',\n  checkout_at: 'checkout_at',\n  reference: 'reference',\n  users_count: 'users_count',\n  listing: 'listing',\n} as const;\n","export * from './useMutationReservation';\nexport * from './types';\nexport * from './schemas';\nexport * from './constants';\n","import { zodListingSchemas } from '@packages/providers';\nimport { z } from 'zod';\n\nimport {\n  CHECKOUT_FORM_SOURCES,\n  GUEST_RESERVATION_SOURCES,\n  PAYER_RESERVATION_SOURCES,\n  RESERVATION_RESPONSE_SOURCES,\n} from './constants';\n\nconst payerReservationSchema = z.object({\n  [PAYER_RESERVATION_SOURCES['first_name']]: z.string().min(2).max(95),\n  [PAYER_RESERVATION_SOURCES['last_name']]: z.string().min(2).max(95),\n  [PAYER_RESERVATION_SOURCES['email']]: z.string().email(),\n});\n\nconst optionalPayerReservationSchema = z\n  .object({\n    [PAYER_RESERVATION_SOURCES['first_name']]: z.string().max(95),\n    [PAYER_RESERVATION_SOURCES['last_name']]: z.string().max(95),\n    [PAYER_RESERVATION_SOURCES['email']]: z.string().email().or(z.literal('')),\n  })\n  .optional();\n\nconst reservationFormValidationBaseSchema = z.object({\n  [CHECKOUT_FORM_SOURCES['guest']]: z.object({\n    [GUEST_RESERVATION_SOURCES['first_name']]: z.string().min(2).max(95),\n    [GUEST_RESERVATION_SOURCES['last_name']]: z.string().min(2).max(95),\n    [GUEST_RESERVATION_SOURCES['email']]: z.string().email(),\n  }),\n});\n\nconst notAppliedForBillingSchema = z\n  .object({\n    [CHECKOUT_FORM_SOURCES['is_apply_for_billing']]: z.literal(false),\n    [CHECKOUT_FORM_SOURCES['payer']]: payerReservationSchema,\n  })\n  .merge(reservationFormValidationBaseSchema);\n\nconst appliedForBillingSchema = z\n  .object({\n    [CHECKOUT_FORM_SOURCES['is_apply_for_billing']]: z.literal(true),\n    [CHECKOUT_FORM_SOURCES['payer']]: optionalPayerReservationSchema,\n  })\n  .merge(reservationFormValidationBaseSchema);\n\nexport const reservationFormValidationSchema = z.discriminatedUnion(\n  CHECKOUT_FORM_SOURCES['is_apply_for_billing'],\n  [notAppliedForBillingSchema, appliedForBillingSchema],\n);\n\nexport const reservationResponseZodSchema = z.object({\n  [RESERVATION_RESPONSE_SOURCES['checkin_at']]: z.string(),\n  [RESERVATION_RESPONSE_SOURCES['checkout_at']]: z.string(),\n  [RESERVATION_RESPONSE_SOURCES['reference']]: z.string(),\n  [RESERVATION_RESPONSE_SOURCES['users_count']]: z.number(),\n  [RESERVATION_RESPONSE_SOURCES['listing']]: zodListingSchemas.show,\n});\n","import { fetchClient } from '@packages/providers';\nimport { Identifier } from '@packages/types';\nimport { useMutation } from '@tanstack/react-query';\nimport { LISTINGS_RESOURCE, RESERVATIONS_RESOURCE } from 'application/resources';\n\nimport { reservationResponseZodSchema } from './schemas';\nimport { ReservationResponseData } from './types';\n\ntype ReservationMutationFnParams = {\n  data: Record<string, unknown>;\n  listingId: Identifier;\n};\n\nconst reservationMutationFn = async (\n  params: ReservationMutationFnParams,\n): Promise<ReservationResponseData> => {\n  const { data, listingId } = params;\n  const {\n    data: { data: reservationResponseData },\n  } = await fetchClient.post({\n    pathname: `${LISTINGS_RESOURCE}/${listingId}/${RESERVATIONS_RESOURCE}`,\n    data,\n  });\n\n  return reservationResponseZodSchema.parse(reservationResponseData);\n};\n\nexport const useMutationReservation = () => {\n  return useMutation({ mutationFn: reservationMutationFn });\n};\n"],"names":["GUEST_RESERVATION_SOURCES","first_name","last_name","email","PAYER_RESERVATION_SOURCES","CHECKOUT_FORM_SOURCES","quote","driver_payment_method_id","rate_plan_id","guest","payer","cc_token","is_apply_for_billing","RESERVATION_RESPONSE_SOURCES","checkin_at","checkout_at","reference","users_count","listing","zodListingSchemas","z","payerReservationSchema","object","string","min","max","optionalPayerReservationSchema","or","literal","optional","reservationFormValidationBaseSchema","notAppliedForBillingSchema","merge","appliedForBillingSchema","reservationFormValidationSchema","discriminatedUnion","reservationResponseZodSchema","number","show","fetchClient","useMutation","LISTINGS_RESOURCE","RESERVATIONS_RESOURCE","reservationMutationFn","params","data","listingId","reservationResponseData","post","pathname","parse","useMutationReservation","mutationFn"],"sourceRoot":""}