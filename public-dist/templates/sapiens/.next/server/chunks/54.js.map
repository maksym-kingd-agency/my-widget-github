{"version":3,"file":"54.js","mappings":"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","sources":["webpack:///./src/components/buttons/Button/Button.tsx","webpack:///./src/components/buttons/Button/index.ts","webpack:///./src/hooks/useLocaleController/useLocaleController.ts","webpack:///./src/hooks/useLocaleController/index.ts","webpack:///./src/components/contexts/LocaleContext.tsx","webpack:///./src/components/custom/Builder/Builder.tsx","webpack:///./src/components/custom/Builder/index.ts","webpack:///./src/helpers/getDateFnsLocale/constants.ts","webpack:///./src/helpers/getDateFnsLocale/getDateFnsLocale.ts","webpack:///./src/helpers/getDateFnsLocale/index.ts"],"sourcesContent":["import { forwardRef } from 'react';\n\nimport { useBuilderState } from '@king-david-it/builder';\nimport { CircularProgress, Button as MuiButton } from '@mui/material';\nimport NextLink from 'components/links/NextLink';\nimport { useTranslation } from 'next-i18next';\n\nimport { ButtonProps } from './types';\n\nexport const Button = forwardRef<HTMLButtonElement, ButtonProps>((props, ref) => {\n  const { children, onClick, loading, disabled, ...rest } = props;\n\n  const { t } = useTranslation();\n\n  const { isEditing } = useBuilderState();\n\n  return (\n    <MuiButton\n      LinkComponent={NextLink}\n      ref={ref}\n      onClick={isEditing ? undefined : onClick}\n      disabled={disabled || loading}\n      {...rest}\n    >\n      {loading ? <CircularProgress size={20} sx={{ position: 'absolute' }} /> : null}\n      {typeof children === 'string' ? t(children) : children}\n    </MuiButton>\n  );\n});\n\nButton.displayName = 'Button';\n\nexport default Button;\n","export { default } from './Button';\nexport * from './Button';\nexport * from './types';\n","import { useCallback, useEffect, useRef } from 'react';\n\nimport { BUILDER, useBuilderState } from '@king-david-it/builder';\nimport { DEFAULT_LOCALE } from 'application/constants';\nimport { LOCALE_COOKIE_KEY } from 'application/cookiesKeys';\nimport { Builder } from 'custom/Builder';\nimport { getDefaultOptions, setDefaultOptions } from 'date-fns';\nimport { getDateFnsLocale } from 'helpers/getDateFnsLocale';\nimport { useCookie } from 'hooks/useCookie';\nimport Router, { useRouter } from 'next/router';\n\nexport type UseLocaleControllerReturn = [string, (locale: string) => void];\nexport interface UseLocaleControllerParams {\n  defaultValue: string | undefined;\n}\n\nexport const useLocaleController = (\n  params: UseLocaleControllerParams,\n): UseLocaleControllerReturn => {\n  const { defaultValue: locale = DEFAULT_LOCALE } = params;\n\n  const { isEditing } = useBuilderState();\n\n  const { locale: routerLocale } = useRouter();\n  const prevRouterLocaleRef = useRef(routerLocale);\n\n  const [, setCookieLocale] = useCookie({\n    name: LOCALE_COOKIE_KEY,\n  });\n\n  const updateRouterLocale = useCallback(\n    (locale: string) => {\n      Router.push({ pathname: Router.pathname, query: Router.query }, undefined, {\n        locale,\n        /**\n         * When we edit the page in the builder we want to call `getServerSideProps`\n         * to get new translations since we don't reload the page because user will\n         * lose the data he entered after local changing. However, when we not in the\n         * editing state we don't want to call `getServerSideProps` since we reload\n         * the page after locale change below.\n         */\n        shallow: !isEditing,\n      });\n    },\n    [isEditing],\n  );\n\n  const setLocale = useCallback<UseLocaleControllerReturn[1]>(\n    (locale) => {\n      setCookieLocale(locale);\n      updateRouterLocale(locale);\n    },\n    [setCookieLocale, updateRouterLocale],\n  );\n\n  /**\n   * Reload the page if `routerLocale` was changed.\n   * We need it to correctly change language of google maps,\n   * since we can't change parameters of the google maps script.\n   */\n  useEffect(() => {\n    if (!isEditing && routerLocale !== prevRouterLocaleRef.current) {\n      Router.reload();\n    }\n  }, [routerLocale, isEditing]);\n\n  // update date-fns locale to match selected locale\n  useEffect(() => {\n    const dateFnsLocale = getDateFnsLocale(locale);\n    const defaultOptions = getDefaultOptions();\n    setDefaultOptions({ ...defaultOptions, locale: dateFnsLocale });\n  }, [locale]);\n\n  // subscribe to locale change event from builder\n  useEffect(() => {\n    const changeLocale = (data?: { locale: string }) => {\n      if (data?.locale) {\n        updateRouterLocale(data.locale);\n      }\n    };\n\n    if (Builder.isEditing) {\n      Builder.on(BUILDER.SET_LOCALE, changeLocale);\n    }\n\n    return () => {\n      if (Builder.isEditing) {\n        Builder.off(BUILDER.SET_LOCALE, changeLocale);\n      }\n    };\n  }, [updateRouterLocale]);\n\n  return [locale, setLocale];\n};\n","export * from './useLocaleController';\n","import { createContext, FC, ReactNode, useContext, useMemo } from 'react';\n\nimport { DEFAULT_LOCALE } from 'application/constants';\nimport { useLocaleController, UseLocaleControllerReturn } from 'hooks/useLocaleController';\nimport { noop } from 'lodash';\n\nexport interface LocaleContextValue {\n  locale: UseLocaleControllerReturn[0];\n  setLocale: UseLocaleControllerReturn[1];\n}\n\nexport interface LocaleContextProviderProps {\n  initialLocale: string | undefined;\n  children: ReactNode;\n}\n\nexport const LocaleContext = createContext<LocaleContextValue>({\n  locale: DEFAULT_LOCALE,\n  setLocale: noop,\n});\n\nexport const LocaleContextProvider: FC<LocaleContextProviderProps> = (props) => {\n  const { initialLocale, children } = props;\n\n  const [locale, setLocale] = useLocaleController({ defaultValue: initialLocale });\n\n  const value = useMemo(() => ({ locale, setLocale }), [locale, setLocale]);\n\n  return <LocaleContext.Provider value={value}>{children}</LocaleContext.Provider>;\n};\n\nexport const useLocaleContext = () => {\n  return useContext(LocaleContext);\n};\n","import { cloneElement, ReactElement } from 'react';\n\nimport {\n  Component,\n  Builder as OriginalBuilder,\n  useNode,\n  UserComponent,\n} from '@king-david-it/builder';\nimport { Box, BoxProps } from '@mui/material';\nimport { DEFAULT_LOCALE } from 'application/constants';\nimport { useLocaleContext } from 'contexts/LocaleContext';\nimport get from 'lodash/get';\n\ntype WrapperProps = {\n  translatable?: string[];\n  rootProps?: Partial<BoxProps>;\n  children: ReactElement;\n  /** Use it when you want to use own root component instead of default wrapper as Box/div.\n   * Pass injected 'inputRef' prop into your own root 'ref' prop */\n  withInputRef?: boolean;\n};\n\nexport const Wrapper = (props: WrapperProps) => {\n  const { translatable = [], rootProps, children, withInputRef = false } = props;\n\n  const { locale } = useLocaleContext();\n\n  const {\n    connectors: { connect },\n  } = useNode();\n\n  const translatableProps = translatable.reduce((acc, translatablePropName) => {\n    const prop = get(props, translatablePropName);\n    const translatableProp = get(prop, locale) || get(prop, DEFAULT_LOCALE);\n    return { ...acc, [translatablePropName]: translatableProp };\n  }, {});\n\n  const inputRef = (el: HTMLDivElement) => el && connect(el);\n\n  if (withInputRef) {\n    return cloneElement(children, { ...children.props, ...translatableProps, ref: inputRef });\n  }\n\n  return (\n    <Box ref={inputRef} {...rootProps}>\n      {cloneElement(children, { ...children.props, ...translatableProps })}\n    </Box>\n  );\n};\n\ntype OptionsType = Omit<WrapperProps, 'children'>;\n\nconst withWrapperHoc = <ComponentType extends UserComponent = UserComponent>(\n  Component: ComponentType,\n  params?: OptionsType,\n) => {\n  const WrappedComponent: ComponentType = ((props) => {\n    return (\n      <Wrapper {...params} {...props}>\n        <Component {...props} />\n      </Wrapper>\n    );\n  }) as ComponentType;\n\n  return WrappedComponent;\n};\n\n/**\n * To remove boilerplates, for custom functionality\n */\nexport class Builder extends OriginalBuilder {\n  /* Probably, It would be better to use object as params here.\n To keep initial params \"style\" as `(component, spec)` same was used.\n At least such way we can easily replace original and custom Builder */\n  static registerComponent<Spec extends Component = Component>(\n    component: UserComponent,\n    spec: Spec & Pick<OptionsType, 'rootProps' | 'withInputRef'>,\n  ) {\n    const { rootProps, withInputRef, ...restSpec } = spec;\n    const { inputs } = restSpec;\n    const translatable = inputs?.reduce<string[]>((acc, inputData) => {\n      if (inputData.isTranslatable) {\n        return [...acc, inputData.name];\n      }\n      return acc;\n    }, []);\n\n    return OriginalBuilder.registerComponent<Spec>(\n      withWrapperHoc(component, { rootProps, translatable, withInputRef }),\n      restSpec as Spec, // we got 'Spec' because the type picks and omits same props\n    );\n  }\n}\n\nexport default Builder;\n","export * from './Builder';\n","import { LOCALES } from 'application/constants';\n// eslint-disable-next-line import/no-duplicates\nimport { Locale } from 'date-fns';\n// eslint-disable-next-line import/no-duplicates\nimport { enUS, fr, he } from 'date-fns/locale';\n\nconst LOCALES_ENUM: { [key in typeof LOCALES[number]]: key } = LOCALES.reduce(\n  (acc, locale) => ({ ...acc, [locale]: locale }),\n  {} as { [key in typeof LOCALES[number]]: key },\n);\n\ntype LocaleKeys = typeof LOCALES_ENUM[keyof typeof LOCALES_ENUM];\n\nexport const dateFnsLocales: Record<LocaleKeys, Locale> = {\n  [LOCALES_ENUM['en-US']]: enUS,\n  [LOCALES_ENUM['fr-FR']]: fr,\n  [LOCALES_ENUM['he-IL']]: he,\n} as const;\n","import { getDefaultOptions } from 'date-fns';\nimport { get } from 'lodash';\n\nimport { dateFnsLocales } from './constants';\n\nexport type GetDateFnsLocaleParam = string | undefined;\nexport type GetDateFnsLocaleReturn = Locale;\n\nexport const getDateFnsLocale = (locale: GetDateFnsLocaleParam): GetDateFnsLocaleReturn => {\n  const enUSLocale = dateFnsLocales['en-US'];\n  if (!locale) {\n    const defaultOptions = getDefaultOptions();\n    const defaultLocale: Locale | undefined = get(defaultOptions, 'locale');\n    return defaultLocale || enUSLocale;\n  }\n\n  return get(dateFnsLocales, locale, enUSLocale);\n};\n","export * from './getDateFnsLocale';\n"],"names":["forwardRef","useBuilderState","CircularProgress","Button","MuiButton","NextLink","useTranslation","props","ref","children","onClick","loading","disabled","rest","t","isEditing","LinkComponent","undefined","size","sx","position","displayName","default","useCallback","useEffect","useRef","BUILDER","DEFAULT_LOCALE","LOCALE_COOKIE_KEY","Builder","getDefaultOptions","setDefaultOptions","getDateFnsLocale","useCookie","Router","useRouter","useLocaleController","params","defaultValue","locale","routerLocale","prevRouterLocaleRef","setCookieLocale","name","updateRouterLocale","push","pathname","query","shallow","setLocale","current","reload","dateFnsLocale","defaultOptions","changeLocale","data","on","SET_LOCALE","off","createContext","useContext","useMemo","noop","LocaleContext","LocaleContextProvider","initialLocale","value","Provider","useLocaleContext","cloneElement","OriginalBuilder","useNode","Box","get","Wrapper","translatable","rootProps","withInputRef","connectors","connect","translatableProps","reduce","acc","translatablePropName","prop","translatableProp","inputRef","el","withWrapperHoc","Component","WrappedComponent","registerComponent","component","spec","restSpec","inputs","inputData","isTranslatable","LOCALES","enUS","fr","he","LOCALES_ENUM","dateFnsLocales","enUSLocale","defaultLocale"],"sourceRoot":""}